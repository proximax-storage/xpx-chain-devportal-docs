openapi: 3.0.0
info:
  version: 0.7.15
  title: Catapult REST API Reference
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: ""
tags:
- name: Account routes
  description: |
    Account related
    endpoints.
- name: Block routes
  description: |
    Block related endpoints.
- name: Config routes
  description: |
    Config related endpoints.
- name: Chain routes
  description: |
    Chain related endpoints.
- name: Diagnostic routes
  description: |
    Diagnostic related endpoints.
- name: Metadata Nem routes
  description: |
    Metadata Nem related endpoints.
- name: Mosaic routes
  description: |
    Mosaic related endpoints.
- name: Namespace routes
  description: |
    Namespace related endpoints.
- name: Transaction routes
  description: |
    Transaction related endpoints.
- name: Network routes
  description: |
    Network related endpoints.
- name: Node routes
  description: |
    Node related endpoints.
- name: Upgrade routes
  description: |
    Upgrade related endpoints.
- name: Lock routes
  description: |
    Lock related endpoints.
- name: Exchange routes
  description: |
    Exchange related endpoints.
    
paths:
  "/account/{accountId}":
    get:
      tags:
      - Account routes
      summary: Get account information
      description: Returns the account information.
      operationId: getAccountInfo
      parameters:
      - name: accountId
        in: path
        description: The public key or address of the account.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /account:
    post:
      tags:
      - Account routes
      summary: Get accounts information
      description: Returns the account information for an array of accounts.
      operationId: getAccountsInfo
      requestBody:
        $ref: "#/components/requestBodies/accountIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of accounts information.
                items:
                  $ref: "#/components/schemas/AccountInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/account/{accountId}/properties":
    get:
      tags:
      - Account routes
      summary: Get account configurable properties information
      description: |
        Returns the [configurable
        properties](https://nemtech.github.io/concepts/account-filter.html) for
        a given account.
      operationId: getAccountProperties
      parameters:
      - name: accountId
        in: path
        description: The public key or address of the account.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountPropertiesInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /account/properties:
    post:
      tags:
      - Account routes
      summary: Get account properties for given array of addresses
      description: |
        Returns the [configurable
        properties](https://nemtech.github.io/concepts/account-filter.html) for
        a given array of addresses.
      operationId: getAccountPropertiesFromAccounts
      requestBody:
        $ref: "#/components/requestBodies/accountIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of account properties information.
                items:
                  $ref: "#/components/schemas/AccountPropertiesInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/account/{accountId}/multisig":
    get:
      tags:
      - Account routes
      summary: Get multisig account information
      description: Returns the [multisig
        account](https://nemtech.github.io/concepts/multisig-account.html)
        information.
      operationId: getAccountMultisig
      parameters:
      - name: accountId
        in: path
        description: The public key or address of the account.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultisigAccountInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/account/{accountId}/multisig/graph":
    get:
      tags:
      - Account routes
      summary: Get multisig account graph information
      description: Returns the [multisig
        account](https://nemtech.github.io/concepts/multisig-account.html)
        graph.
      operationId: getAccountMultisigGraph
      parameters:
      - name: accountId
        in: path
        description: The public key or address of the account.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MultisigAccountGraphInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/blocks/{height}/limit/{limit}":
    get:
      tags:
      - Block routes
      summary: Get blocks information
      description: Gets up to limit number of blocks after given block height.
      operationId: getBlocksByHeightWithLimit
      parameters:
      - name: height
        in: path
        description: The height of the block. If height -1 is not a multiple of the limit
          provided, the inferior closest multiple + 1 is used instead.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      - name: limit
        in: path
        description: The number of blocks to be returned.
        required: true
        schema:
          type: integer
          enum:
          - 25
          - 50
          - 75
          - 100
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of blocks information.
                items:
                  $ref: "#/components/schemas/BlockInfoDTO"
        "409":
          description: invalid argument
  "/block/{height}":
    get:
      tags:
      - Block routes
      summary: Get block information
      description: Gets a block from the chain that has the given height.
      operationId: getBlockByHeight
      parameters:
      - name: height
        in: path
        description: The height of the block.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/block/{height}/transaction/{hash}/merkle":
    get:
      tags:
      - Block routes
      summary: Get the merkle path for a given a transaction and block
      description: Returns the merkle path for a
        [transaction](https://nemtech.github.io/concepts/transaction.html)
                     included in a block. The path is the complementary data needed to
                     calculate the merkle root. A client can compare if the calculated root
                     equals the one recorded in the block header, verifying that the
                     transaction was included in the block.
      operationId: getMerkleTransaction
      parameters:
      - name: height
        in: path
        description: The height of the block.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      - name: hash
        in: path
        description: The hash of the transaction.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerkleProofInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/block/{height}/receipts":
    get:
      tags:
      - Block routes
      summary: Get receipts from a block
      description: Returns the [receipts](https://nemtech.github.io/concepts/receipt.html)
        linked to a block.
      operationId: getBlockReceipts
      parameters:
      - name: height
        in: path
        description: The height of the block.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementsDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/block/{height}/receipt/{hash}/merkle":
    get:
      tags:
      - Block routes
      summary: Get the merkle path for a given a receipt statement hash and block
      description: Returns the merkle path for a [receipt statement or
        resolution](https://nemtech.github.io/concepts/receipt.html) linked to a
        block. The path is the complementary data needed to calculate the merkle
        root. A client can compare if the calculated root equals the one
        recorded in the block header, verifying that the receipt was linked with
        the block.
      operationId: getMerkleReceipts
      parameters:
      - name: height
        in: path
        description: The height of the block.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      - name: hash
        in: path
        description: The hash of the receipt statement or resolution.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerkleProofInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /chain/height:
    get:
      tags:
      - Chain routes
      summary: Get the current height of the chain
      description: Returns the current height of the blockchain.
      operationId: getBlockchainHeight
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeightInfoDTO"
  /chain/score:
    get:
      tags:
      - Chain routes
      summary: Get the current score of the chain
      description: |
        Gets the current score of the blockchain. The higher the score, the
        better the chain. During synchronization, nodes try to get the best
        blockchain in the network.

        The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:

            block score = difficulty − time elapsed since last block
      operationId: getBlockchainScore
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockchainScoreDTO"
  /diagnostic/storage:
    get:
      tags:
      - Diagnostic routes
      summary: Get the storage information of the node
      description: Returns diagnostic information about the node storage.
      operationId: getDiagnosticStorage
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageInfoDTO"
  /diagnostic/server:
    get:
      tags:
      - Diagnostic routes
      summary: Get the version of the running rest component
      description: Returns the version of the running rest component.
      operationId: getServerInfo
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerDTO"
  '/config/{height}':
    get:
      tags:
      - Config routes
      summary: Get config of network
      description: Gets config of network at height.
      operationId: getConfig
      parameters:
      - name: height
        in: path
        description: The height of the blockchain to get config.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkConfigDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument  
  '/metadata_nem/{compositeHash}':
    get:
      tags:
      - Metadata Nem routes
      summary: Get metadata (namespace/mosaic/account) for an compositeHashes
      description: Gets an nem metadata.
      operationId: getNemMetadata
      parameters:
      - name: hash
        in: path
        description: The composited hash.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataNemInfoDTO'
        '400':
          description: invalid content
        '409':
          description: invalid argument
  '/metadata_nem':
    get:
      tags:
        - Metadata Nem routes
      summary: Search metadata entries
      description: Returns an array of metadata.
      operationId: searchMetadataEntries
      parameters:
        - $ref: '#/components/parameters/sourceAddressQuery'
        - $ref: '#/components/parameters/targetKeyQuery'
        - $ref: '#/components/parameters/scopedMetadataKeyQuery'
        - $ref: '#/components/parameters/targetIdQuery'
        - $ref: '#/components/parameters/metadataType'
        - $ref: '#/components/parameters/pageSizeQuery'
        - $ref: '#/components/parameters/pageNumberQuery'
        - $ref: '#/components/parameters/offsetQuery'
        - $ref: '#/components/parameters/orderQuery'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataNemPage'
        '409':
          description: invalid argument
    post:
      tags:
      - Metadata Nem routes
      summary: Get metadatas (namespace/mosaic/account) for compositeHashes
      description: Gets nem metadatas.
      operationId: getNemMetadatas
      requestBody:
        $ref: "#/components/requestBodies/compositeHashes"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of mosaic names.
                items:
                  $ref: '#/components/schemas/MetadataNemInfoDTO'
        "400":
          description: invalid content
        "409":
          description: invalid argument        
  "/mosaic/{mosaicId}":
    get:
      tags:
      - Mosaic routes
      summary: Get mosaic information
      description: Gets the mosaic definition for a given mosaicId.
      operationId: getMosaic
      parameters:
      - name: mosaicId
        in: path
        description: The mosaic identifier.
        required: true
        schema:
          type: string
          format: hex
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MosaicInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/mosaic/{mosaicId}/levy":
    get:
      tags:
      - Mosaic routes
      summary: Get mosaic levy information
      description: Gets the mosaic levy definition for a given mosaicId.
      operationId: getMosaicLevy
      parameters:
      - name: mosaicId
        in: path
        description: The mosaic identifier.
        required: true
        schema:
          type: string
          format: hex
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MosaicLevyInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/mosaic/{mosaicId}/richlist":
    get:
      tags:
      - Mosaic routes
      summary: Get mosaic information
      description: Retrieve owners of a given mosaic sorted on descending order based on amount. (REST only)
      operationId: getMosaicRichList
      parameters:
      - name: mosaicId
        in: path
        description: The mosaic identifier.
        required: true
        schema:
          type: string
          format: hex
      - name: page
        in: query
        description: The page of list (starts at 0).
        required: false
        schema:
          type: integer
      - name: pageSize
        in: query
        description: The count of items on a page (max 100, default 25).
        required: false
        schema:
          type: integer
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MosaicRichListDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /mosaic:
    post:
      tags:
      - Mosaic routes
      summary: Get mosaics information for an array of mosaics
      description: Gets an array of mosaic definition.
      operationId: getMosaics
      requestBody:
        $ref: "#/components/requestBodies/mosaicIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of mosaics information.
                items:
                  $ref: "#/components/schemas/MosaicInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /mosaic/names:
    post:
      tags:
      - Mosaic routes
      summary: Get readable names for a set of mosaics
      description: Returns friendly names for mosaics.
      operationId: getMosaicsNames
      requestBody:
        $ref: "#/components/requestBodies/mosaicIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of mosaic names.
                items:
                  $ref: "#/components/schemas/MosaicNamesDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/namespace/{namespaceId}":
    get:
      tags:
      - Namespace routes
      summary: Get namespace information
      description: Gets the namespace for a given namespaceId.
      operationId: getNamespace
      parameters:
      - name: namespaceId
        in: path
        description: The namespace identifier.
        required: true
        schema:
          type: string
          format: hex
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamespaceInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/account/{accountId}/namespaces":
    get:
      tags:
      - Namespace routes
      summary: Get namespaces owned by an account
      description: Gets an array of namespaces for a given account address.
      operationId: getNamespacesFromAccount
      parameters:
      - name: accountId
        in: path
        description: The address or public key of the account.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: The number of namespaces to return.
        schema:
          type: integer
      - name: id
        in: query
        description: The namespace id up to which namespace objects are returned.
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of namespaces information.
                items:
                  $ref: "#/components/schemas/NamespaceInfoDTO"
        "409":
          description: invalid argument
  /account/namespaces:
    post:
      tags:
      - Namespace routes
      summary: Get namespaces for given array of addresses
      description: Gets namespaces for a given array of addresses.
      operationId: getNamespacesFromAccounts
      parameters:
      - name: pageSize
        in: query
        description: The number of namespaces to return.
        schema:
          type: integer
      - name: id
        in: query
        description: The namespace id up to which namespace objects are returned.
        schema:
          type: string
      requestBody:
        $ref: "#/components/requestBodies/accountIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of namespaces information.
                items:
                  $ref: "#/components/schemas/NamespaceInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /account/names:
    post:
      tags:
      - Account routes
      summary:  Get readable names for a set of accountIds.
      description: Returns friendly names for accounts.
      operationId: getAccountsNames
      requestBody:
        $ref: "#/components/requestBodies/accountIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of account names.
                items:
                  $ref: "#/components/schemas/AccountNamesDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /namespace/names:
    post:
      tags:
      - Namespace routes
      summary: Get readable names for a set of namespaces
      description: Returns friendly names for namespaces.
      operationId: getNamespacesNames
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/namespaceIds"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of namespace names.
                items:
                  $ref: "#/components/schemas/NamespaceNameDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/transactions":
    put:
      tags:
      - Transaction routes
      summary: Announce a new transaction
      description: Announces a transaction to the network. It is recommended to use the
                     NEM2-SDK to announce transactions as they should be
        [serialized](https://nemtech.github.io/concepts/transaction.html#defining-a-transaction).
      operationId: announceTransaction
      requestBody:
        $ref: "#/components/requestBodies/transactionPayload"
      responses:
        "202":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnounceTransactionInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/transactions/{group}":
    get:
      tags:
      - Transaction routes
      summary: Get transactions information
      description: Returns transactions information by given group.
      operationId: getTransactionsByGroup
      parameters:
      - name: group
        in: path
        description: The group of the transaction.
        required: true
        schema:
          type: string
          enum: [confirmed, unconfirmed, partial]
      - $ref: '#/components/parameters/heightQuery'
      - $ref: '#/components/parameters/fromHeightQuery'
      - $ref: '#/components/parameters/toHeightQuery'
      - $ref: '#/components/parameters/addressQuery'
      - $ref: '#/components/parameters/signerPublicKeyQuery'
      - $ref: '#/components/parameters/recipientAddressQuery'
      - $ref: '#/components/parameters/transactionTypeQuery'
      - $ref: '#/components/parameters/embeddedQuery'
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of transactions information.
                items:
                  $ref: "#/components/schemas/TransactionInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/transaction/{group}/{transactionId}":
    post:
      tags:
      - Transaction routes
      summary: Get transactions information
      description: Returns transaction information by a given transactionId and group.
      operationId: getTransactionByGroupAndID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transactionIds"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/transactions/partial":
    put:
      tags:
      - Transaction routes
      summary: Announce an aggregate bonded transaction
      description: Announces an [aggregate bonded
        transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#aggregate-bonded)
        to the network.
      operationId: announcePartialTransaction
      requestBody:
        $ref: "#/components/requestBodies/transactionPayload"
      responses:
        "202":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnounceTransactionInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/transactions/cosignature":
    put:
      tags:
      - Transaction routes
      summary: Announce a cosignature transaction
      description: Announces a [cosignature
        transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#cosignature-transaction)
        to the network.
      operationId: announceCosignatureTransaction
      requestBody:
        $ref: "#/components/requestBodies/cosignature"
      responses:
        "202":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnounceTransactionInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/transactionStatus/{hash}":
    get:
      tags:
      - Transaction routes
      summary: Get transaction status
      description: Returns the transaction status for a given hash.
      operationId: getTransactionStatus
      parameters:
      - name: hash
        in: path
        description: The transaction hash.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionStatusDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/transactionStatus":
    post:
      tags:
      - Transaction routes
      summary: Get transactions status.
      description: Returns an array of transaction statuses for a given array of transaction hashes.
      operationId: getTransactionsStatuses
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transactionHashes"
        required: true
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: The array of transactions status.
                items:
                  $ref: "#/components/schemas/TransactionStatusDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /network:
    get:
      tags:
      - Network routes
      summary: Get the current network type of the chain
      description: Returns the current network type.
      operationId: getNetworkType
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkTypeDTO"
  /node/info:
    get:
      tags:
      - Node routes
      summary: Get the node information
      description: |
        Supplies additional information about the application running on a node.
      operationId: getNodeInfo
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeInfoDTO"
  /node/time:
    get:
      tags:
      - Node routes
      summary: Get the node time
      description: Gets the node time at the moment the reply was sent and received.
      operationId: getNodeTime
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeTimeDTO"
  '/upgrade/{height}':
    get:
      tags:
      - Upgrade routes
      summary: Get software info of network
      description:  Get software info of network at height.
      operationId: getUpgrade
      parameters:
      - name: height
        in: path
        description: The height of the blockchain to get software info.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainUpgradeDTO'
        '404':
          description: resource not found
        '409':
          description: invalid argument
  
  '/account/{accountId}/exchange':
    get:
      tags:
      - Exchange routes
      summary: Get exchange offers by account id
      description: Return exchange offer by account id. 
      operationId: getAccountExchangeOffers
      parameters:
      - name: accountId
        in: path
        description: The public key or address of an account.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  exchange:
                    $ref: "#/components/schemas/AccountExchangeDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  '/exchange/{offerType}/{mosaicId}':
    get:
      tags:
      - Exchange routes
      summary: Get exchange offer by type and mosaic id
      description: Get exchange offer by type and mosaic id. 
      operationId: getExchangeOffers
      parameters:
      - name: offerType
        in: path
        description: The type of exchange offer.
        required: true
        schema:
          type: string
      - name: mosaicId
        in: path
        description: The mosaic identifier.
        required: true
        schema:
          type: string
          format: hex
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExchangesDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  '/exchange/mosaics':
    get:
      tags:
      - Exchange routes
      summary: Get a list of mosaics id with exchange offers
      description: Get a list of mosaics id with exchange offer 
      operationId: getExchangeMosaics
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    mosaicId:
                      type: string
                      example: "0DE5F42A0A3B4200"
  '/account/{accountId}/lock/hash':
    get:
      tags:
      - Lock routes
      summary: Get account lock hash
      description: Get account lock hash. 
      operationId: getAccountLockHash
      parameters:
      - name: accountId
        in: path
        description: The public key or address of the account.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HashLockWithMeta"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  '/account/{accountId}/lock/secret':
    get:
      tags:
      - Lock routes
      summary: Get account lock secret
      description: Get account lock secret.
      operationId: getAccountLocksecret
      parameters:
      - name: accountId
        in: path
        description: The public key or address of the account.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SecretLockWithMeta"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  '/lock/secret/{secret}':
    get:
      tags:
      - Lock routes
      summary: Get secret hash
      description: Get secret hash. 
      operationId: getSecretHash
      parameters:
      - name: secret
        in: path
        description: The proof hashed.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretLockWithMeta"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  '/lock/hash/{hash}':
    get:
      tags:
      - Lock routes
      summary: Get lock hash
      description: Get lock hash. 
      operationId: getLockHash
      parameters:
      - name: hash
        in: path
        description: The hash.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HashLockWithMeta"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  '/lock/compositeHash/{compositeHash}':
    get:
      tags:
      - Lock routes
      summary: Get composite hash
      description: Get composite hash. 
      operationId: getCompositeHash
      parameters:
      - name: compositeHash
        in: path
        description: The composite hash of account addres and secret.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretLockWithMeta"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  
externalDocs:
  description: ProximaX Developer Center
  url: 'https://proximax.io/'
servers:
- url: http://bctestnet1.brimstone.xpxsirius.io:3000
components:
  parameters:
    metadataType:
      name: metadataType
      in: query
      description: Filter by metadata type.
      schema:
        $ref: '#/components/schemas/MetadataTypeEnum'
    offsetQuery:
      name: offset
      in: query
      description: |
        Entry id at which to start pagination.
        If the ordering parameter is set to -id, the elements returned precede the identifier.
        Otherwise, newer elements with respect to the id are returned.
      schema:
        type: string
    orderQuery:
      name: order
      in: query
      description: |
        Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
        If the request does not specify ``orderBy``, REST returns the collection ordered by id.
      schema:
        type: string
        description: |
          Indicates how to sort the results: 
          * ``asc`` - ascending
          * ``desc`` - descending
        enum:
          - asc
          - desc
        default: desc
    pageNumberQuery:
      name: pageNumber
      in: query
      description: Filter by page number.
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSizeQuery:
      name: pageSize
      in: query
      description: Select the number of entries to return.
      schema:
        type: integer
        minimum: 10
        maximum: 100
        default: 10

    sourceAddressQuery:
      name: sourceAddress
      in: query
      description: Filter by address sending the metadata entry.
      schema:
        type: string
        format: hex
        description: Address expressed in hexadecimal base.
        example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
    scopedMetadataKeyQuery:
      name: scopedMetadataKey
      in: query
      description: Filter by metadata key.
      schema:
        $ref: '#/components/schemas/metadataKey'
    targetIdQuery:
      name: targetId
      in: query
      description: Filter by namespace or mosaic id.
      schema:
        type: string
        format: hex
        example: 0DC67FBE1CAD29E3
    targetKeyQuery:
      name: targetPublicKey
      in: query
      description: Filter by target public key.
      schema:
        $ref: '#/components/schemas/publicKeys'   

    addressQuery:
      name: address
      in: query
      description: Address of the account.
      schema:
        type: string
        format: hex
    embeddedQuery:
      name: embedded
      in: query
      description: If transaction if embedded.
      schema:
        type: boolean
    fromHeightQuery:
      name: fromHeight
      in: query
      description: The start of height to get transactions information.
      schema:
        type: integer
        format: uint64
        minimum: 1
    heightQuery:
      name: height
      in: query
      description: The height of the block to get transactions information.
      schema:
        type: integer
        format: uint64
        minimum: 1
    recipientAddressQuery:
      name: recipientAddress
      in: query
      description: Address of transaction's recipient.
      schema:
        type: string
        format: hex
    signerPublicKeyQuery:
      name: signerPublicKey
      in: query
      description: Public key of signer.
      schema:
        type: string 
        format: hex
    toHeightQuery:
      name: toHeight
      in: query
      description: The end of height to get transactions information.
      schema:
        type: integer
        format: uint64
        minimum: 1 
    transactionTypeQuery:
      name: type
      in: query
      description: The type of transaction
      schema:
        type: array
        items:
         anyOf:
         - $ref: '#components/schemas/EntityTypeEnum'

     

  requestBodies:
    metadataIds:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/metadataIds"
    publicKeys:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/publicKeys"
    accountIds:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/accountIds"
      required: true
    transactionPayload:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/transactionPayload"
      required: true
    cosignature:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/cosignature"
      required: true
    mosaicIds:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/mosaicIds"
    compositeHashes:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/compositeHashes"
      required: true
  schemas:
    # Enumerations
    TransactionStatusTypeEnum:
      type: string
      enum:
        - Success
        - Neutral
        - Failure
        - Failure_Core_Past_Deadline
        - Failure_Core_Future_Deadline
        - Failure_Core_Insufficient_Balance
        - Failure_Core_Too_Many_Transactions
        - Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block
        - Failure_Core_Wrong_Network
        - Failure_Core_Invalid_Address
        - Failure_Core_Invalid_Version
        - Failure_Core_Invalid_Transaction_Fee
        - Failure_Core_Block_Harvester_Ineligible
        - Failure_Core_Invalid_FeeInterest
        - Failure_Core_Invalid_FeeInterestDenominator
        - Failure_Hash_Exists
        - Failure_Signature_Not_Verifiable
        - Failure_AccountLink_Invalid_Action
        - Failure_AccountLink_Link_Already_Exists
        - Failure_AccountLink_Link_Does_Not_Exist
        - Failure_AccountLink_Unlink_Data_Inconsistency
        - Failure_AccountLink_Remote_Account_Ineligible
        - Failure_AccountLink_Remote_Account_Signer_Not_Allowed
        - Failure_AccountLink_Remote_Account_Participant_Not_Allowed
        - Failure_Aggregate_Too_Many_Transactions
        - Failure_Aggregate_No_Transactions
        - Failure_Aggregate_Too_Many_Cosignatures
        - Failure_Aggregate_Redundant_Cosignatures
        - Failure_Aggregate_Ineligible_Cosigners
        - Failure_Aggregate_Missing_Cosigners
        - Failure_Aggregate_Plugin_Config_Malformed
        - Failure_Aggregate_Bonded_Not_Enabled
        - Failure_LockHash_Invalid_Mosaic_Id
        - Failure_LockHash_Invalid_Mosaic_Amount
        - Failure_LockHash_Hash_Exists
        - Failure_LockHash_Hash_Does_Not_Exist
        - Failure_LockHash_Inactive_Hash
        - Failure_LockHash_Invalid_Duration
        - Failure_LockHash_Plugin_Config_Malformed
        - Failure_LockSecret_Invalid_Hash_Algorithm
        - Failure_LockSecret_Hash_Exists
        - Failure_LockSecret_Hash_Not_Implemented
        - Failure_LockSecret_Proof_Size_Out_Of_Bounds
        - Failure_LockSecret_Secret_Mismatch
        - Failure_LockSecret_Unknown_Composite_Key
        - Failure_LockSecret_Inactive_Secret
        - Failure_LockSecret_Hash_Algorithm_Mismatch
        - Failure_LockSecret_Invalid_Duration
        - Failure_LockSecret_Plugin_Config_Malformed
        - Failure_Mosaic_Invalid_Duration
        - Failure_Mosaic_Invalid_Name
        - Failure_Mosaic_Name_Id_Mismatch
        - Failure_Mosaic_Expired
        - Failure_Mosaic_Owner_Conflict
        - Failure_Mosaic_Id_Mismatch
        - Failure_Mosaic_Parent_Id_Conflict
        - Failure_Mosaic_Invalid_Property
        - Failure_Mosaic_Invalid_Flags
        - Failure_Mosaic_Invalid_Divisibility
        - Failure_Mosaic_Invalid_Supply_Change_Direction
        - Failure_Mosaic_Invalid_Supply_Change_Amount
        - Failure_Mosaic_Invalid_Id
        - Failure_Mosaic_Modification_Disallowed
        - Failure_Mosaic_Modification_No_Changes
        - Failure_Mosaic_Supply_Immutable
        - Failure_Mosaic_Supply_Negative
        - Failure_Mosaic_Supply_Exceeded
        - Failure_Mosaic_Non_Transferable
        - Failure_Mosaic_Max_Mosaics_Exceeded
        - Failure_Mosaic_Plugin_Config_Malformed
        - Failure_Multisig_Modify_Account_In_Both_Sets
        - Failure_Multisig_Modify_Multiple_Deletes
        - Failure_Multisig_Modify_Redundant_Modifications
        - Failure_Multisig_Modify_Unknown_Multisig_Account
        - Failure_Multisig_Modify_Not_A_Cosigner
        - Failure_Multisig_Modify_Already_A_Cosigner
        - Failure_Multisig_Modify_Min_Setting_Out_Of_Range
        - Failure_Multisig_Modify_Min_Setting_Larger_Than_Num_Cosignatories
        - Failure_Multisig_Modify_Unsupported_Modification_Type
        - Failure_Multisig_Modify_Max_Cosigned_Accounts
        - Failure_Multisig_Modify_Max_Cosigners
        - Failure_Multisig_Modify_Loop
        - Failure_Multisig_Modify_Max_Multisig_Depth
        - Failure_Multisig_Operation_Not_Permitted_By_Account
        - Failure_Multisig_Plugin_Config_Malformed
        - Failure_Namespace_Invalid_Duration
        - Failure_Namespace_Invalid_Name
        - Failure_Namespace_Name_Id_Mismatch
        - Failure_Namespace_Expired
        - Failure_Namespace_Owner_Conflict
        - Failure_Namespace_Id_Mismatch
        - Failure_Namespace_Plugin_Config_Malformed
        - Failure_Namespace_Invalid_Namespace_Type
        - Failure_Namespace_Root_Name_Reserved
        - Failure_Namespace_Too_Deep
        - Failure_Namespace_Parent_Unknown
        - Failure_Namespace_Already_Exists
        - Failure_Namespace_Already_Active
        - Failure_Namespace_Eternal_After_Nemesis_Block
        - Failure_Namespace_Max_Children_Exceeded
        - Failure_Namespace_Alias_Invalid_Action
        - Failure_Namespace_Alias_Namespace_Unknown
        - Failure_Namespace_Alias_Already_Exists
        - Failure_Namespace_Alias_Does_Not_Exist
        - Failure_Namespace_Alias_Owner_Conflict
        - Failure_Namespace_Alias_Unlink_Type_Inconsistency
        - Failure_Namespace_Alias_Unlink_Data_Inconsistency
        - Failure_Namespace_Alias_Invalid_Address
        - Failure_Property_Invalid_Property_Type
        - Failure_Property_Modification_Type_Invalid
        - Failure_Property_Modification_Address_Invalid
        - Failure_Property_Modification_Operation_Type_Incompatible
        - Failure_Property_Modify_Unsupported_Modification_Type
        - Failure_Property_Modification_Redundant
        - Failure_Property_Modification_Not_Allowed
        - Failure_Property_Modification_Count_Exceeded
        - Failure_Property_Values_Count_Exceeded
        - Failure_Property_Value_Invalid
        - Failure_Property_Signer_Address_Interaction_Not_Allowed
        - Failure_Property_Mosaic_Transfer_Not_Allowed
        - Failure_Property_Transaction_Type_Not_Allowed
        - Failure_Property_Plugin_Config_Malformed
        - Failure_Transfer_Message_Too_Large
        - Failure_Transfer_Out_Of_Order_Mosaics
        - Failure_Transfer_Plugin_Config_Malformed
        - Failure_Transfer_Too_Many_Mosaics
        - Failure_Transfer_Zero_Amount
        - Failure_NetworkConfig_Invalid_Signer
        - Failure_NetworkConfig_BlockChain_Config_Too_Large
        - Failure_NetworkConfig_Config_Redundant
        - Failure_NetworkConfig_BlockChain_Config_Malformed
        - Failure_NetworkConfig_Plugin_Config_Malformed
        - Failure_NetworkConfig_SupportedEntityVersions_Config_Too_Large
        - Failure_NetworkConfig_SupportedEntityVersions_Config_Malformed
        - Failure_NetworkConfig_Network_Config_Trx_Cannot_Be_Unsupported
        - Failure_NetworkConfig_Plugin_Config_Missing
        - Failure_NetworkConfig_ImportanceGrouping_Less_Or_Equal_Half_MaxRollbackBlocks
        - Failure_NetworkConfig_HarvestBeneficiaryPercentage_Exceeds_One_Hundred
        - Failure_NetworkConfig_MaxMosaicAtomicUnits_Invalid
        - Failure_NetworkConfig_ApplyHeightDelta_Zero
        - Failure_BlockchainUpgrade_Invalid_Signer
        - Failure_BlockchainUpgrade_Upgrade_Period_Too_Low
        - Failure_BlockchainUpgrade_Redundant
        - Failure_BlockchainUpgrade_Invalid_Current_Version
        - Failure_BlockchainUpgrade_Plugin_Config_Malformed
        - Failure_Metadata_Invalid_Metadata_Type
        - Failure_Metadata_Modification_Type_Invalid
        - Failure_Metadata_Modification_Key_Invalid
        - Failure_Metadata_Modification_Value_Invalid
        - Failure_Metadata_Modification_Key_Redundant
        - Failure_Metadata_Modification_Value_Redundant
        - Failure_Metadata_Remove_Not_Existing_Key
        - Failure_Metadata_Address_Modification_Not_Permitted
        - Failure_Metadata_Mosaic_Modification_Not_Permitted
        - Failure_Metadata_Namespace_Modification_Not_Permitted
        - Failure_Metadata_Address_Not_Found
        - Failure_Metadata_Mosaic_Not_Found
        - Failure_Metadata_Namespace_Not_Found
        - Failure_Metadata_Too_Much_Keys
        - Failure_Metadata_Plugin_Config_Malformed
        - Failure_Metadata_MosaicId_Malformed
        - Failure_Metadata_NamespaceId_Malformed
        - Failure_Exchange_Offer_Doesnt_Exist
        - Failure_Exchange_Zero_Amount
        - Failure_Exchange_Zero_Price
        - Failure_Exchange_No_Offers
        - Failure_Exchange_Mosaic_Not_Allowed
        - Failure_Exchange_Buying_Own_Units_Is_Not_Allowed
        - Failure_Exchange_Not_Enough_Units_In_Offer
        - Failure_Exchange_Invalid_Price
        - Failure_Exchange_Account_Doesnt_Have_Any_Offer
        - Failure_Exchange_Offer_Duration_Too_Large
        - Failure_Exchange_Plugin_Config_Malformed
        - Failure_Exchange_No_Offered_Mosaics_To_Remove
        - Failure_Exchange_Duplicated_Offer_In_Request
        - Failure_Exchange_Offer_Exists
        - Failure_Exchange_Zero_Offer_Duration
        - Failure_Service_Drive_Duration_Is_Not_Multiple_Of_BillingPeriod
        - Failure_Service_Wrong_Percent_Approvers
        - Failure_Service_Min_Replicators_More_Than_Replicas
        - Failure_Service_Drive_Invalid_Duration
        - Failure_Service_Drive_Invalid_Billing_Period
        - Failure_Service_Drive_Invalid_Billing_Price
        - Failure_Service_Drive_Invalid_Size
        - Failure_Service_Drive_Invalid_Replicas
        - Failure_Service_Drive_Invalid_Min_Replicators
        - Failure_Service_Drive_Already_Exists
        - Failure_Service_Plugin_Config_Malformed
        - Failure_Service_Operation_Is_Not_Permitted
        - Failure_Service_Drive_Does_Not_Exist
        - Failure_Service_Replicator_Already_Connected_To_Drive
        - Failure_Service_Root_Hash_Is_Not_Equal
        - Failure_Service_File_Hash_Redundant
        - Failure_Service_File_Doesnt_Exist
        - Failure_Service_Too_Many_Files_On_Drive
        - Failure_Service_Drive_Replicator_Not_Registered
        - Failure_Service_Drive_Root_No_Changes
        - Failure_Service_Drive_Has_Ended
        - Failure_Service_Drive_Cant_Find_Default_Exchange_Offer
        - Failure_Service_Exchange_Of_This_Mosaic_Is_Not_Allowed
        - Failure_Service_Drive_Not_In_Pending_State
        - Failure_Service_Exchange_More_Than_Required
        - Failure_Service_Exchange_Cost_Is_Worse_Than_Default
        - Failure_Service_Drive_Processed_Full_Duration
        - Failure_Service_Zero_Upload_Info
        - Failure_Service_Participant_Redundant
        - Failure_Service_Participant_Is_Not_Registered_To_Drive
        - Failure_Service_No_Files_To_Download
        - Failure_Service_Zero_Infos
        - Failure_Service_File_Deposit_Is_Zero
        - Failure_Service_Verification_Already_In_Progress
        - Failure_Service_Verification_Has_Not_Started
        - Failure_Service_Verification_Is_Not_Active
        - Failure_Service_Verification_Has_Not_Timed_Out
        - Failure_Service_Drive_Is_Not_In_Progress
        - Failure_Service_Replicator_Has_Active_File_Without_Deposit
        - Failure_Service_File_Size_Invalid
        - Failure_Service_Doesnt_Contain_Streaming_Tokens
        - Failure_Service_Drive_Size_Exceeded
        - Failure_Service_Failed_Block_Hashes_Missing
        - Failure_Service_Duplicate_Failed_Block_Hashes
        - Failure_Service_Max_Replicators_Reached
        - Failure_Service_Invalid_File_Recipient
        - Failure_Service_File_Download_Not_In_Progress
        - Failure_Operation_Plugin_Config_Malformed
        - Failure_Operation_Token_Invalid
        - Failure_Operation_Expired
        - Failure_Operation_Invalid_Duration
        - Failure_Operation_Executor_Redundant
        - Failure_Operation_Mosaic_Redundant
        - Failure_Operation_Mosaic_Invalid
        - Failure_Operation_Zero_Mosaic_Amount
        - Failure_Operation_Invalid_Mosaic_Amount
        - Failure_Operation_Invalid_Executor
        - Failure_Operation_Identify_Transaction_Misplaced
        - Failure_Operation_End_Transaction_Misplaced
        - Failure_Operation_Identify_Transaction_Aggregated_With_End_Operation
        - Failure_SuperContract_Super_Contract_Already_Exists
        - Failure_SuperContract_Operation_Is_Not_Permitted
        - Failure_SuperContract_File_Is_Not_Exist
        - Failure_SuperContract_Remove_Super_Contract_File
        - Failure_SuperContract_Drive_Has_Ended
        - Failure_SuperContract_SuperContract_Is_Not_Exist
        - Failure_Chain_Unlinked
        - Failure_Chain_Block_Not_Hit
        - Failure_Chain_Block_Inconsistent_State_Hash
        - Failure_Chain_Block_Inconsistent_Receipts_Hash
        - Failure_Chain_Unconfirmed_Cache_Too_Full
        - Failure_Consumer_Empty_Input
        - Failure_Consumer_Block_Transactions_Hash_Mismatch
        - Neutral_Consumer_Hash_In_Recency_Cache
        - Failure_Consumer_Remote_Chain_Too_Many_Blocks
        - Failure_Consumer_Remote_Chain_Improper_Link
        - Failure_Consumer_Remote_Chain_Duplicate_Transactions
        - Failure_Consumer_Remote_Chain_Unlinked
        - Failure_Consumer_Remote_Chain_Mismatched_Difficulties
        - Failure_Consumer_Remote_Chain_Score_Not_Better
        - Failure_Consumer_Remote_Chain_Too_Far_Behind
        - Failure_Consumer_Remote_Chain_Too_Far_In_Future
        - Failure_Extension_Partial_Transaction_Cache_Prune
        - Failure_Extension_Partial_Transaction_Dependency_Removed
      description: |
        * Success - Validation result is success.
        * Neutral - Validation result is neither success nor failure.
        * Failure - Validation result is failure.
        * Failure_Core_Past_Deadline - Validation failed because the deadline passed.
        * Failure_Core_Future_Deadline - Validation failed because the deadline is too far in the future. Deadlines are only allowed to lie up to `24` hours ahead.
        * Failure_Core_Insufficient_Balance - Validation failed because the account has an insufficient balance.
        * Failure_Core_Too_Many_Transactions - Validation failed because there are too many transactions in a block.
        * Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block - Validation failed because an entity originated from the nemesis account after the nemesis block.
        * Failure_Core_Wrong_Network - Validation failed because the entity has the wrong network specified.
        * Failure_Core_Invalid_Address - Validation failed because an address is invalid.
        * Failure_Core_Invalid_Version - Validation failed because the version of a block or a tranaction is invalid.
        * Failure_Core_Invalid_Transaction_Fee - Validation failed because the transaction fee is invalid.
        * Failure_Core_Block_Harvester_Ineligible - Validation failed because a block was validated by an ineligible validator.
        * Failure_Core_Invalid_FeeInterest - Validation failed because the fee interest coefficient is invalid.
        * Failure_Core_Invalid_FeeInterestDenominator - Validation failed because the denominator of fee interest coefficient is invalid.
        * Failure_Hash_Exists - Validation failed because the entity hash is already known.
        * Failure_Signature_Not_Verifiable - Validation failed because the verification of the signature failed.
        * Failure_AccountLink_Invalid_Action -  Validation failed because the account link action is invalid: link (0) and unlink (1).
        * Failure_AccountLink_Link_Already_Exists - Validation failed because the main account is already linked to another account.
        * Failure_AccountLink_Link_Does_Not_Exist - Validation failed because the unlink data is not consistent with existing account link.
        * Failure_AccountLink_Unlink_Data_Inconsistency - Validation failed because the unlink data is not consistent with existing account link.
        * Failure_AccountLink_Remote_Account_Ineligible - Validation failed because the link is attempting to convert ineligible account to remote.
        * Failure_AccountLink_Remote_Account_Signer_Not_Allowed - Validation failed because the remote is not allowed to sign a transaction.
        * Failure_AccountLink_Remote_Account_Participant_Not_Allowed - Validation failed because the remote is not allowed to participate in the transaction.
        * Failure_Aggregate_Too_Many_Transactions - Validation failed because an aggregate has too many transactions. An aggregate transaction can contain up to `1000` inner transactions.
        * Failure_Aggregate_No_Transactions - Validation failed because an aggregate does not have any transactions.
        * Failure_Aggregate_Too_Many_Cosignatures - Validation failed because an aggregate has too many cosignatures. The maximum number of cosignatories allowed is `15`.
        * Failure_Aggregate_Redundant_Cosignatures - Validation failed because there are redundant cosignatures.
        * Failure_Aggregate_Ineligible_Cosigners - Validation failed because at least one cosigner is ineligible.
        * Failure_Aggregate_Missing_Cosigners - Validation failed because at least one required cosigner is missing. The tranaction was announced as complete but had missing cosignatures.
        * Failure_Aggregate_Plugin_Config_Malformed - Validation failed because the aggregate transaction plugin configuration is malformed.
        * Failure_Aggregate_Bonded_Not_Enabled - Validation failed because aggregate bonded tranaction is not enabled.
        * Failure_LockHash_Invalid_Mosaic_Id - Validation failed because the lock does not allow the specified mosaic. The only mosaic allowed is `xpx`.
        * Failure_LockHash_Invalid_Mosaic_Amount - Validation failed because the lock does not allow the specified amount. The minimum amount is `10`.
        * Failure_LockHash_Hash_Exists - Validation failed because the hash is already present in cache.
        * Failure_LockHash_Hash_Does_Not_Exist - Validation failed because the hash is not present in cache. Remember to lock before announcing aggregate bonded transactions.
        * Failure_LockHash_Inactive_Hash - Validation failed because the hash is inactive.
        * Failure_LockHash_Invalid_Duration - Validation failed because the duration is too long. Duration is allowed to lie up to `2` days.
        * Failure_LockHash_Plugin_Config_Malformed - Validation failed because the lockhash plugin configuration is malformed.
        * Failure_LockSecret_Invalid_Hash_Algorithm - Validation failed because the hash algorithm for lock type secret is invalid. See the [available algorithms](../built-in-features/cross-chain-swaps.md) list.
        * Failure_LockSecret_Hash_Exists - Validation failed because the hash is already present in cache.
        * Failure_LockSecret_Hash_Not_Implemented - Validation failed because the hash is not implemented yet.
        * Failure_LockSecret_Proof_Size_Out_Of_Bounds - Validation failed because the proof is too small or too large. It should be between `10` and `1000` bytes.
        * Failure_LockSecret_Secret_Mismatch - Validation failed because the secret does not match proof.
        * Failure_LockSecret_Unknown_Composite_Key - Validation failed because the secret is unknown.
        * Failure_LockSecret_Inactive_Secret - Validation failed because the secret is inactive.
        * Failure_LockSecret_Hash_Algorithm_Mismatch - Validation failed because the hash algorithm does not match.
        * Failure_LockSecret_Invalid_Duration - Validation failed because the duration is too long. Duration is allowed to lie up to `30` days.
        * Failure_LockSecret_Plugin_Config_Malformed - Validation failed because the locksecret plugin configuration is malformed.
        * Failure_Mosaic_Invalid_Duration - Validation failed because the duration has an invalid value. Duration is allowed to lie up to `365` days.
        * Failure_Mosaic_Invalid_Name - Validation failed because the name is invalid. The mosaic name may have a maximum length of `64` characters. Allowed characters are a-to-z; 0-to-9 and the following special characters: `_-
        * Failure_Mosaic_Name_Id_Mismatch - Validation failed because the name and id don’t match.
        * Failure_Mosaic_Expired - Validation failed because the parent is expired.
        * Failure_Mosaic_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
        * Failure_Mosaic_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
        * Failure_Mosaic_Parent_Id_Conflict - Validation failed because the existing parent id does not match the supplied parent id.
        * Failure_Mosaic_Invalid_Property - Validation failed because a mosaic property is invalid.
        * Failure_Mosaic_Invalid_Flags - Validation failed because the mosaic flags are invalid.
        * Failure_Mosaic_Invalid_Divisibility - Validation failed because the mosaic divisibility is invalid. The specified divisibility is greater than `6` or negative.
        * Failure_Mosaic_Invalid_Supply_Change_Direction - Validation failed because the mosaic supply change direction is invalid: decrease (0) and increase (1).
        * Failure_Mosaic_Invalid_Supply_Change_Amount - Validation failed because the mosaic supply change amount is invalid.
        * Failure_Mosaic_Invalid_Id - Validation failed because the mosaic id is invalid.
        * Failure_Mosaic_Modification_Disallowed - Validation failed because mosaic modification is not allowed.
        * Failure_Mosaic_Modification_No_Changes - Validation failed because mosaic modification would not result in any changes.
        * Failure_Mosaic_Supply_Immutable - Validation failed because the mosaic supply is immutable.
        * Failure_Mosaic_Supply_Negative - Validation failed because the resulting mosaic supply is negative.
        * Failure_Mosaic_Supply_Exceeded - Validation failed because the resulting mosaic supply exceeds the maximum allowed value. The range should be between 0 and `9.000.000.000`.
        * Failure_Mosaic_Non_Transferable - Validation failed because the mosaic is not transferable. Only the creator of the mosaic is eligible to be the recipient of a non-transferable mosaic once transferred.
        * Failure_Mosaic_Max_Mosaics_Exceeded - Validation failed because the credit of the mosaic would exceed the maximum different mosaics an account is allowed to own. Set by default to `10.000` different mosaics per account.
        * Failure_Mosaic_Plugin_Config_Malformed - Validation failed because the mosaic plugin configuration is malformed.
        * Failure_Multisig_Modify_Account_In_Both_Sets - Validation failed because an account is specified to be both added and removed.
        * Failure_Multisig_Modify_Multiple_Deletes - Validation failed because there are multiple removals.
        * Failure_Multisig_Modify_Redundant_Modifications - Validation failed because tehre are redundant modifications.
        * Failure_Multisig_Modify_Unknown_Multisig_Account - Validation failed because account is not in multisig cache.
        * Failure_Multisig_Modify_Not_A_Cosigner - Validation failed because there is not account to be removed.
        * Failure_Multisig_Modify_Already_A_Cosigner - Validation failed because the account to be added is already a cosignatory.
        * Failure_Multisig_Modify_Min_Setting_Out_Of_Range - Validation failed because thenew minimum settings are out of range.
        * Failure_Multisig_Modify_Min_Setting_Larger_Than_Num_Cosignatories - Validation failed because min settings are larger than number of cosignatories.
        * Failure_Multisig_Modify_Unsupported_Modification_Type - Validation failed because the modification type is unsupported: add (0) and remove (1).
        * Failure_Multisig_Modify_Max_Cosigned_Accounts - Validation failed because the cosignatory already cosigns the maximum number of accounts. An account cannot be cosignatory of more than `5` multisig accounts.
        * Failure_Multisig_Modify_Max_Cosigners - Validation failed because the multisig account already has the maximum number of cosignatories. A multisig account cannot have more than `10` cosignatories.
        * Failure_Multisig_Modify_Loop - Validation failed because a multisig loop is created. A multisig account cannot be cosignatory of itself. Neither an account can be turned into multisig having as cosignatory another multisig where the account is cosignatory.
        * Failure_Multisig_Modify_Max_Multisig_Depth - Validation failed because the max multisig depth is exceeded. The maximum depth of a multilevel multisig account is `3`.
        * Failure_Multisig_Operation_Not_Permitted_By_Account - Validation failed because an operation is not permitted by a multisig account. A multisig account cannot be converted into a multisig account again.
        * Failure_Multisig_Plugin_Config_Malformed - Validation failed because the multisig plugin configuration is malformed.
        * Failure_Namespace_Invalid_Duration - Validation failed because the duration has an invalid value. Duration is allowed to lie up to `365` days.
        * Failure_Namespace_Invalid_Name - Validation failed because the namespace has an invalid name. The namespace name may have a maximum length of `64` characters. Allowed characters are a-to-z; 0-to-9 and the following special characters: `_-
        * Failure_Namespace_Name_Id_Mismatch - Validation failed because the name and id don’t match.
        * Failure_Namespace_Expired - Validation failed because the namespace has expired.
        * Failure_Namespace_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
        * Failure_Namespace_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
        * Failure_Namespace_Plugin_Config_Malformed - Validation failed because the namespace plugin configuration is malformed.
        * Failure_Namespace_Invalid_Namespace_Type - Validation failed because the namespace type is invalid: rootnamespace (0) and subnamesapce (1).
        * Failure_Namespace_Root_Name_Reserved - Validation failed because the root namespace has a [reserved name](https://github.com/proximax-storage/cpp-xpx-chain/blob/master/resources/config-network.properties#L60).
        * Failure_Namespace_Too_Deep - Validation failed because the resulting namespace would exceed the maximum allowed namespace depth. Namespaces can have up to `3` nested levels.
        * Failure_Namespace_Parent_Unknown - Validation failed because the namespace parent is unknown.
        * Failure_Namespace_Already_Exists - Validation failed because the namespace already exists.
        * Failure_Namespace_Already_Active - Validation failed because the namespace is already active.
        * Failure_Namespace_Eternal_After_Nemesis_Block - Validation failed because an eternal namespace was received after the nemesis block.
        * Failure_Namespace_Max_Children_Exceeded - Validation failed because the maximum number of children for a root namespace was exceeded.
        * Failure_Namespace_Alias_Invalid_Action - Validation failed because alias action is invalid: link (0) and unlink (1).
        * Failure_Namespace_Alias_Namespace_Unknown - Validation failed because the namespace does not exist.
        * Failure_Namespace_Alias_Already_Exists - Validation failed because the namespace is already linked to an alias.
        * Failure_Namespace_Alias_Does_Not_Exist - Validation failed because the namespace is not linked to an alias.
        * Failure_Namespace_Alias_Owner_Conflict - Validation failed because the namespace has different owner.
        * Failure_Namespace_Alias_Unlink_Type_Inconsistency - Validation failed because unlink type is not consistent with the existing alias.
        * Failure_Namespace_Alias_Unlink_Data_Inconsistency - Validation failed because unlink data is not consistent with the existing alias.
        * Failure_Namespace_Alias_Invalid_Address - Validation failed because the aliased address is invalid.
        * Failure_Property_Invalid_Property_Type - Validation failed because the property type is invalid.
        * Failure_Property_Modification_Type_Invalid - Validation failed because a modification type is invalid.
        * Failure_Property_Modification_Address_Invalid - Validation failed because a modification address is invalid.
        * Failure_Property_Modification_Operation_Type_Incompatible - Validation failed because the operation type is incompatible.
        * Failure_Property_Modify_Unsupported_Modification_Type - Validation failed because the modification type is unsupported: add (0) and delete (1).
        * Failure_Property_Modification_Redundant - Validation failed because a modification is redundant.
        * Failure_Property_Modification_Not_Allowed - Validation failed because there is not a value in the container.
        * Failure_Property_Modification_Count_Exceeded - Validation failed because the transaction has too many modifications.
        * Failure_Property_Values_Count_Exceeded - Validation failed because the resulting property has too many values. The maximum number of values a property can have is `512`.
        * Failure_Property_Value_Invalid - Validation failed because the property value is invalid.
        * Failure_Property_Signer_Address_Interaction_Not_Allowed - Validation failed because the signer is not allowed to interact with an address involved in the transaction.
        * Failure_Property_Mosaic_Transfer_Not_Allowed - Validation failed because the mosaic transfer is prohibited by the recipient.
        * Failure_Property_Transaction_Type_Not_Allowed - Validation failed because the transaction type is not allowed to be initiated by the signer.
        * Failure_Property_Plugin_Config_Malformed - Validation failed because the property plugin configuration is malformed.
        * Failure_Transfer_Message_Too_Large - Validation failed because the message is too large. It exceeds the limit of `1024` bytes.
        * Failure_Transfer_Out_Of_Order_Mosaics - Validation failed because the mosaics are out of order. Mosaics on a transfer transaction should be ordered by id value.
        * Failure_Transfer_Plugin_Config_Malformed - Validation failed because the transfer plugin configuration is malformed.
        * Failure_Transfer_Too_Many_Mosaics - Validation failed because there are too many mosaics.
        * Failure_Transfer_Zero_Amount - Validation failed because there is zero amount of mosaics.
        * Failure_NetworkConfig_Invalid_Signer - Validation failed because the transaction signer is not nemesis account.
        * Failure_NetworkConfig_BlockChain_Config_Too_Large - Validation failed because the network configuration size exceeded the limit.
        * Failure_NetworkConfig_Config_Redundant - Validation failed because a network configuration has already been set up at the height.
        * Failure_NetworkConfig_BlockChain_Config_Malformed - Validation failed because the network configuration is malformed.
        * Failure_NetworkConfig_Plugin_Config_Malformed - Validation failed because the configuration of network configuration plugin is malformed.
        * Failure_NetworkConfig_SupportedEntityVersions_Config_Too_Large - Validation failed because the supported entity configuration exceeded the limit.
        * Failure_NetworkConfig_SupportedEntityVersions_Config_Malformed - Validation failed because the supported entity configuration is malformed.
        * Failure_NetworkConfig_Network_Config_Trx_Cannot_Be_Unsupported - Validation failed because the supported entity versions configuration has no version of the network config transaction.
        * Failure_NetworkConfig_Plugin_Config_Missing - Validation failed because some plugin config missing.
        * Failure_NetworkConfig_ImportanceGrouping_Less_Or_Equal_Half_MaxRollbackBlocks - Validation failed because of the importance grouping (block) less or equal half max rollback blocks.
        * Failure_NetworkConfig_HarvestBeneficiaryPercentage_Exceeds_One_Hundred - Validation failed because of harvest beneficiary more than 100%.
        * Failure_NetworkConfig_MaxMosaicAtomicUnits_Invalid - Validation failed because the max mosaic amount units is invelid.
        * Failure_NetworkConfig_ApplyHeightDelta_Zero - Validation failed because the height delta is zero.
        * Failure_BlockchainUpgrade_Invalid_Signer - Validation failed because the blockchain upgrade transaction signer is not nemesis account.
        * Failure_BlockchainUpgrade_Upgrade_Period_Too_Low - Validation failed because the blockchain upgrade period is too low.
        * Failure_BlockchainUpgrade_Redundant - Validation failed because a blockchain upgrade has already been set up at the height.
        * Failure_BlockchainUpgrade_Invalid_Current_Version - Validation failed because the current blockchain version is invalid.
        * Failure_BlockchainUpgrade_Plugin_Config_Malformed - Validation failed because the blockchain upgrade plugin configuration is malformed.
        * Failure_Metadata_Invalid_Metadata_Type - Validation failed because the metadata type is invalid.
        * Failure_Metadata_Modification_Type_Invalid - Validation failed because a modification type is invalid.
        * Failure_Metadata_Modification_Key_Invalid - Validation failed because a key has wrong size.
        * Failure_Metadata_Modification_Value_Invalid - Validation failed because a modification value is invalid.
        * Failure_Metadata_Modification_Key_Redundant - Validation failed because a key already exists.
        * Failure_Metadata_Modification_Value_Redundant - Validation failed because there is already modification with the same key and value.
        * Failure_Metadata_Remove_Not_Existing_Key - Validation failed because of an attempt to remove not existing key.
        * Failure_Metadata_Address_Modification_Not_Permitted - Validation failed because a modification of address is not permitted.
        * Failure_Metadata_Mosaic_Modification_Not_Permitted - Validation failed because a modification of mosaic is not permitted.
        * Failure_Metadata_Namespace_Modification_Not_Permitted - Validation failed because a modification of namespace is not permitted.
        * Failure_Metadata_Address_Not_Found - Validation failed because address is not found.
        * Failure_Metadata_Mosaic_Not_Found - Validation failed because mosaic is not found.
        * Failure_Metadata_Namespace_Not_Found - Validation failed because namespace is not found.
        * Failure_Metadata_Too_Much_Keys - Validation failed because the number of keys exceeded the limit.
        * Failure_Metadata_Plugin_Config_Malformed - Validation failed because the metadata plugin configuration is malformed.
        * Failure_Metadata_MosaicId_Malformed - Validation failed because the mosaic id is malformed.
        * Failure_Metadata_NamespaceId_Malformed - Validation failed because the namespace id is malformed.
        * Failure_Exchange_Offer_Doesnt_Exist - Validation failed because the offer does not exist.
        * Failure_Exchange_Zero_Amount - Validation failed because the amount is zero.
        * Failure_Exchange_Zero_Price - Validation failed because the price is zero.
        * Failure_Exchange_No_Offers - Validation failed because there are no offers.
        * Failure_Exchange_Mosaic_Not_Allowed - Validation failed because mosaic is not allowed.
        * Failure_Exchange_Buying_Own_Units_Is_Not_Allowed - Validation failed because there is no possibility of buying own units.
        * Failure_Exchange_Not_Enough_Units_In_Offer - Validation failed because of not enough units in the offer.
        * Failure_Exchange_Invalid_Price - Validation failed because of the price is invalid.
        * Failure_Exchange_Account_Doesnt_Have_Any_Offer - Validation failed because the account does not have any offers.
        * Failure_Exchange_Offer_Duration_Too_Large - Validation failed because the offer duration is too large.
        * Failure_Exchange_Plugin_Config_Malformed - Validation failed because the exchange plugin configuration is malformed.
        * Failure_Exchange_No_Offered_Mosaics_To_Remove - Validation failed because there are no offered mosaics to remove.
        * Failure_Exchange_Duplicated_Offer_In_Request - Validation failed because the offer is duplicated in the request.
        * Failure_Exchange_Offer_Exists - Validation failed because the offer already exists.
        * Failure_Exchange_Zero_Offer_Duration - Validation failed because the offer duration is zero.
        * Failure_Service_Drive_Duration_Is_Not_Multiple_Of_BillingPeriod - Validation failed because the duration multiple of is not billing period.
        * Failure_Service_Wrong_Percent_Approvers - Validation failed because the percentage of approvers is wrong.
        * Failure_Service_Min_Replicators_More_Than_Replicas - Validation failed because the minimum number of replicates more than the number of replicas.
        * Failure_Service_Drive_Invalid_Duration - Validation failed because the duration is invalid.
        * Failure_Service_Drive_Invalid_Billing_Period - Validation failed because the billing period is invalid.
        * Failure_Service_Drive_Invalid_Billing_Price - Validation failed because the billing price is invalid.
        * Failure_Service_Drive_Invalid_Size - Validation failed because the size is invalid.
        * Failure_Service_Drive_Invalid_Replicas - Validation failed because the number of replicas is invalid.
        * Failure_Service_Drive_Invalid_Min_Replicators - Validation failed because the minimum number of replicas is invalid.
        * Failure_Service_Drive_Already_Exists - Validation failed because the drive with this id already exists.
        * Failure_Service_Plugin_Config_Malformed - Validation failed because the service plugin configuration is malformed.
        * Failure_Service_Operation_Is_Not_Permitted - Validation failed because the operation is not permitted.
        * Failure_Service_Drive_Does_Not_Exist - Validation failed because the drive with this id does not exists.
        * Failure_Service_Replicator_Already_Connected_To_Drive - Validation failed because the replicator already connected to this drive.
        * Failure_Service_Root_Hash_Is_Not_Equal - Validation failed because the root hash is not equal.
        * Failure_Service_File_Hash_Redundant - Validation failed because the file hash is redundant.
        * Failure_Service_File_Doesnt_Exist - Validation failed because the file does not exist.
        * Failure_Service_Too_Many_Files_On_Drive - Validation failed because the drive is full.
        * Failure_Service_Drive_Replicator_Not_Registered - Validation failed because the replicator is not registered.
        * Failure_Service_Drive_Root_No_Changes - Validation failed because the root hash has not changed.
        * Failure_Service_Drive_Has_Ended - Validation failed because the drive duration is expired.
        * Failure_Service_Drive_Cant_Find_Default_Exchange_Offer - Validation failed because default exchange offer not found.
        * Failure_Service_Exchange_Of_This_Mosaic_Is_Not_Allowed - Validation failed because the exchange of this mosaic is not allowed.
        * Failure_Service_Drive_Not_In_Pending_State - Validation failed because the drive is not in the pending state.
        * Failure_Service_Exchange_More_Than_Required - Validation failed because the sum of the exchange more than is required.
        * Failure_Service_Exchange_Cost_Is_Worse_Than_Default - Validation failed because the exchange cost is worse than the default offer one.
        * Failure_Service_Drive_Processed_Full_Duration - Validation failed because the drive duration is expired.
        * Failure_Service_Zero_Upload_Info - Validation failed because there is no upload info.
        * Failure_Service_Participant_Redundant - Validation failed because the participant is redundant.
        * Failure_Service_Participant_Is_Not_Registered_To_Drive - Validation failed because the participant is not registered to the drive.
        * Failure_Service_No_Files_To_Download - Validation failed because there are zero files to download.
        * Failure_Service_Zero_Infos - Validation failed because there is no info.
        * Failure_Service_File_Deposit_Is_Zero - Validation failed because no deposit is zero.
        * Failure_Service_Verification_Already_In_Progress - Validation failed because of the verification already in progress..
        * Failure_Service_Verification_Has_Not_Started - Validation failed because of the verification has not started.
        * Failure_Service_Verification_Is_Not_Active - Validation failed because of the verification is not active.
        * Failure_Service_Verification_Has_Not_Timed_Out - Validation failed because of the verification has not timed out.
        * Failure_Service_Drive_Is_Not_In_Progress - Validation failed because the drive is not in the progress state.
        * Failure_Service_Replicator_Has_Active_File_Without_Deposit - Validation failed because the replicator has an active file without deposit.
        * Failure_Service_File_Size_Invalid - Validation failed because the removing files have a different file size.
        * Failure_Service_Doesnt_Contain_Streaming_Tokens - Validation failed because it does not contain streaming tokens.
        * Failure_Service_Drive_Size_Exceeded - Validation failed because the drive size is exceeded.
        * Failure_Service_Failed_Block_Hashes_Missing - Validation failed because block hashes are missing.
        * Failure_Service_Duplicate_Failed_Block_Hashes - Validation failed because block hashes are duplicated.
        * Failure_Service_Max_Replicators_Reached - Validation failed because the max count of replicators is reached.
        * Failure_Service_Invalid_File_Recipient - Validation failed because the recipient of the file is invalid.
        * Failure_Service_File_Download_Not_In_Progress - Validation failed because the file download not in progress.
        * Failure_Operation_Plugin_Config_Malformed - Validation failed because the operation plugin configuration is malformed.
        * Failure_Operation_Token_Invalid - Validation failed because the token is invalid.
        * Failure_Operation_Expired - Validation failed because the operation is expired.
        * Failure_Operation_Invalid_Duration - Validation failed because the duration is invalid.
        * Failure_Operation_Executor_Redundant - Validation failed because the operation plugin configuration is malformed.
        * Failure_Operation_Mosaic_Redundant - Validation failed because the mosaic is redundant.
        * Failure_Operation_Mosaic_Invalid - Validation failed because the mosaic is invalid.
        * Failure_Operation_Zero_Mosaic_Amount - Validation failed because the amount of mosaic is zero.
        * Failure_Operation_Invalid_Mosaic_Amount - Validation failed because the amount of mosaic is invalid.
        * Failure_Operation_Invalid_Executor - Validation failed because the executor is invalid.
        * Failure_Operation_Identify_Transaction_Misplaced - Validation failed because the identify transaction is misplaced.
        * Failure_Operation_End_Transaction_Misplaced - Validation failed because the end transaction is misplaced.
        * Failure_Operation_Identify_Transaction_Aggregated_With_End_Operation - Validation failed because the identify transaction aggregated with the end operation.
        * Failure_SuperContract_Super_Contract_Already_Exists - Validation failed because the super contract already exists.
        * Failure_SuperContract_Operation_Is_Not_Permitted - Validation failed because the operation is not permited.
        * Failure_SuperContract_File_Is_Not_Exist - Validation failed because the file is not exist.
        * Failure_SuperContract_Remove_Super_Contract_File - Validation failed because the super contract executing and there is no possibility to remove the file.
        * Failure_SuperContract_Drive_Has_Ended - Validation failed because the drive has ended (finished or terminated).
        * Failure_SuperContract_SuperContract_Is_Not_Exist - Validation failed because the super contract is not exist.
        * Failure_Chain_Unlinked - Validation failed because a block was received that did not link with the existing chain.
        * Failure_Chain_Block_Not_Hit - Validation failed because a block was received that is not a hit.
        * Failure_Chain_Block_Inconsistent_State_Hash - Validation failed because a block was received that has an inconsistent state hash.
        * Failure_Chain_Block_Inconsistent_Receipts_Hash - Validation failed because a block was received that has an inconsistent receipts hash.
        * Failure_Chain_Unconfirmed_Cache_Too_Full - Validation failed because the unconfirmed cache is too full.
        * Failure_Consumer_Empty_Input - Validation failed because the consumer input is empty.
        * Failure_Consumer_Block_Transactions_Hash_Mismatch - Validation failed because the block transactions hash does not match the calculated value.
        * Neutral_Consumer_Hash_In_Recency_Cache - Validation failed because the entity hash is present in the recency cache.
        * Failure_Consumer_Remote_Chain_Too_Many_Blocks - Validation failed because the chain part has too many blocks.
        * Failure_Consumer_Remote_Chain_Improper_Link - Validation failed because the chain is internally improperly linked.
        * Failure_Consumer_Remote_Chain_Duplicate_Transactions - Validation failed because the chain part contains duplicate transactions.
        * Failure_Consumer_Remote_Chain_Unlinked - Validation failed because the chain part does not link to the current chain.
        * Failure_Consumer_Remote_Chain_Mismatched_Difficulties - Validation failed because the remote chain difficulties do not match the calculated difficulties.
        * Failure_Consumer_Remote_Chain_Score_Not_Better - Validation failed because the remote chain score is not better.
        * Failure_Consumer_Remote_Chain_Too_Far_Behind - Validation failed because the remote chain is too far behind.
        * Failure_Consumer_Remote_Chain_Too_Far_In_Future - Validation failed because the remote chain timestamp is too far in the future.
        * Failure_Extension_Partial_Transaction_Cache_Prune - Validation failed because the partial transaction was pruned from the temporal cache.
        * Failure_Extension_Partial_Transaction_Dependency_Removed - Validation failed because the partial transaction was pruned from the temporal cache due to its dependency being removed.
    AccountLinkTypeEnum:
      type: integer
      enum:
      - 0
      - 1
      - 2
      - 3
      description: |
        The account link types:
        * 0 -  Unlinked. Account is not linked to another account.
        * 1 -  Main. Account is a balance-holding account that is linked to a remote harvester account.
        * 2 -  Remote. Account is a remote harvester account that is linked to a balance-holding account.
        * 3 -  Remote_Unlinked. Account is a remote harvester eligible account that is unlinked.
      example: 0
    AliasActionEnum:
      type: integer
      enum:
      - 0
      - 1
      description: |
        The alias action:
        * 0 -  Link alias.
        * 1 -  Unlink alias.
      example: 0
    AliasTypeEnum:
      type: integer
      enum:
      - 0
      - 1
      - 2
      description: |
        The alias type:
        * 0 -  No alias.
        * 1 -  Mosaic id alias.
        * 2 -  Addres alias.
      example: 0
    AccountPropertyTypeEnum:
      type: integer
      example: 1
      enum:
      - 1
      - 2
      - 4
      - 5
      - 129
      - 130
      - 132
      description: |
        The account properties type:
        * 0x01 (1 decimal) - The property type only allows receiving transactions from an address.
        * 0x02 (2 decimal) - The property type only allows receiving transactions containing a mosaic id.
        * 0x04 (4 decimal) - The property type only allows sending transactions with a given transaction type.
        * 0x05 (5 decimal) - Property type sentinel.
        * 0x81 (129 decimal) - The property type blocks receiving transactions from an address.
        * 0x82 (130 decimal) - The property type blocks receiving transactions containing a mosaic id.
        * 0x84 (132 decimal) -  The property type blocks sending transactions with a given transaction type.
    AccountPropertiesModificationTypeEnum:
      type: integer
      enum:
      - 0
      - 1
      description: |
        The account properties modification type:
        * 0 - Add property.
        * 1 - Remove property.
      example: 0
    EntityTypeEnum:
      type: integer
      enum:
      - 16728
      - 16729
      - 16701
      - 16957
      - 17213
      - 16717
      - 16973
      - 16718
      - 16974
      - 17230
      - 16724
      - 16725
      - 16705
      - 16961
      - 16712
      - 16720
      - 16976
      - 17232
      - 16722
      - 16978
      - 16716
      - 32835
      - 33091
      description: |
        The entity type:
        * 0x4158 (16728 decimal) - Blockchain Upgrade Transaction.
        * 0x4159 (16729 decimal) - Network Config Transaction.
        * 0x413D (16701 decimal) - Address Metadata Transaction.
        * 0x423D (16957 decimal) - Mosaic Metadata Transaction.
        * 0x433D (17213 decimal) - Namespace Metadata Transaction.
        * 0x414D (16717 decimal) - Mosaic Definition Transaction.
        * 0x424D (16973 decimal) - Mosaic Supply Change Transaction.
        * 0x414E (16718 decimal) - Register Namespace Transaction.
        * 0x424E (16974 decimal) - Address Alias Transaction.
        * 0x434E (17230 decimal) - Mosaic Alias Transaction.
        * 0x4154 (16724 decimal) - Transfer Transaction.
        * 0x4155 (16725 decimal) - Modify Multisig Account Transaction.
        * 0x4141 (16705 decimal) - Aggregate Complete Transaction.
        * 0x4241 (16961 decimal) - Aggregate Bonded Transaction.
        * 0x4148 (16712 decimal) - Hash Lock Transaction.
        * 0x4150 (16720 decimal) - Account Properties Address Transaction.
        * 0x4250 (16976 decimal) - Account Properties Mosaic Transaction.
        * 0x4350 (17232 decimal) - Account Properties Entity Type Transaction.
        * 0x4152 (16722 decimal) - Secret Lock Transaction.
        * 0x4252 (16978 decimal) - Secret Proof Transaction.
        * 0x414C (16716 decimal) - Account Link Transaction.
        * 0x8043 (32835 decimal) - Nemesis block.
        * 0x8143 (33091 decimal) - Regular block.
        * 0x415D (16733 decimal) - Add Exchange Offer Transaction.
        * 0x425D (16989 decimal) - Exchange Offer Transaction.
        * 0x435D (17245 decimal) - Remove Exchange Offer Transaction.
        * 0x4157 (16727 decimal) - Modify Contract Transaction.
        * 0x415A (16730 decimal) - Prepare Drive Transaction.
        * 0x425A (16986 decimal) - Join To Drive Transaction.
        * 0x435A (17242 decimal) - Drive File System Transaction.
        * 0x445A (17498 decimal) - Files Deposit Transaction.
        * 0x455A (17754 decimal) - End Drive Transaction.
        * 0x465A (18010 decimal) - Drive Files Reward Transaction.
        * 0x475A (18266 decimal) - Start Drive Verification Transaction.
        * 0x485A (18522 decimal) - End Drive Verification Transaction.

    HashAlgorithmEnum:
      type: integer
      enum:
      - 0
      - 1
      - 2
      - 3
      description: |
        The hash algorithm used to hash te proof:
        * 0 (Op_Sha3_256)  - The proof is hashed using sha3 256.
        * 1 (Op_Keccak_256)  - The proof is hashed using Keccak (ETH compatibility).
        * 2 (Op_Hash_160)  - The proof is hashed twice: first with Sha-256 and then with RIPEMD-160 (bitcoin’s OP_HASH160).
        * 3 (Op_Hash_256)  - The proof is hashed twice with Sha-256 (bitcoin’s OP_HASH256).
    LinkActionEnum:
      type: integer
      enum:
      - 0
      - 1
      description: |
        The type of the action:
        * 0 - Link.
        * 1 - Unlink.
    MetadataTypeEnum:
      type: integer
      enum:
      - 1
      - 2
      - 3
      description: |
        The type of the metadata:
        * 1 - Address metadata.
        * 2 - Mosaic metadata.
        * 3 - Namespace metadata.
      example: 3
    MetadataModificationTypeEnum:
      type: integer
      enum:
      - 0
      - 1
      description: |
        The type of the metadata modification:
        * 0 - Add metadata.
        * 1 - Remove metadata.
      example: 0
    MessageTypeEnum:
      type: integer
      enum:
      - 0
      description: |
        The type of the message:
        * 0 - Regular message.
      example: 0
    MosaicPropertyIdEnum:
      type: integer
      enum:
      - 0
      - 1
      - 2
      description: |
        The mosaic propery id means:
        * 0 - MosaicFlags
        * 1 - Divisibility
        * 2 - Duration
      example: 0
    MosaicDirectionEnum:
      type: integer
      enum:
      - 0
      - 1
      description: |
        The supply modification direction:
        * 0  - Decrease.
        * 1  - Increase.
      example: 0
    MultisigModificationTypeEnum:
      type: integer
      enum:
      - 0
      - 1
      description: |
        The type of the modification:
        * 0 - Add cosignatory.
        * 1 - Remove cosignatory.
      example: 0
    NamespaceTypeEnum:
      type: integer
      enum:
      - 0
      - 1
      description: |
        The namespace type:
        * 0 -  Root namespace.
        * 1 -  Subnamespace.
      example: 0
    ReceiptTypeEnum:
      type: integer
      enum:
      - 4685
      - 4941
      - 4686
      - 8515
      - 8776
      - 9042
      - 12616
      - 12626
      - 16717
      - 16718
      - 20803
      - 57652
      - 61763
      - 62019
      description: |
        The type of the receipt:
        * 0x134D (4941 decimal) - Mosaic_Rental_Fee.
        * 0x124E (4686 decimal) - Namespace_Rental_Fee.
        * 0x2143 (8515 decimal) - Harvest_Fee.
        * 0x2248 (8776 decimal) - LockHash_Completed.
        * 0x2348 (9032 decimal) - LockHash_Expired.
        * 0x2252 (8786 decimal) - LockSecret_Completed.
        * 0x2352 (9042 decimal) - LockSecret_Expired.
        * 0x3148 (12616 decimal) - LockHash_Created.
        * 0x3152 (12626 decimal) - LockSecret_Created.
        * 0x414D (16717 decimal) - Mosaic_Expired.
        * 0x414E (16718 decimal) - Namespace_Expired.
        * 0x5143 (20803 decimal) - Inflation.
        * 0xE134 (57652 decimal) - Transaction_Group.
        * 0xF143 (61763 decimal) - Address_Alias_Resolution.
        * 0xF243 (62019 decimal) - Mosaic_Alias_Resolution.
    NetworkTypeEnum:
      type: integer
      description: |
        The entity version. The higher byte represents the network
        identifier:
        * 0x68 (MAIN_NET) - Public main network.
        * 0x98 (TEST_NET) - Public test network.
        * 0x60 (MIJIN) - Private network.
        * 0x90 (MIJIN_TEST) - Private test network.
      example: 36867
    RolesTypeEnum:
      type: string
      enum:
      - owner
      - replicator
      description: |
        The role of the node:
        * owner - show drives where an account is a participant as owner
        * replicator - show drives where an account is a participant as replicators
      example: owner
    OfferTypeEnum:
      type: integer
      enum:
      - 0
      - 1
      - 2
      description: |
        The role of the node:
        * 0 - A sell offer.
        * 1 - A buy offer.
        * 2 - Unknown type.
      example: 2
    # Type
    UInt64DTO:
      type: array
      items:
        type: integer
        format: int32
      example:
      - lower
      - higher
    HashDTO:
      type: string
      example: "C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810"
    # Account endpoints
    AccountInfoDTO:
      type: object
      required:
      - meta
      - account
      properties:
        meta:
          $ref: "#/components/schemas/AccountMetaDTO"
        account:
          $ref: "#/components/schemas/AccountDTO"
    AccountMetaDTO:
      type: object
      required:
      - height
      - hash
      - merkleComponentHash
      - index
      - id
      properties:
        height:
          $ref: "#/components/schemas/UInt64DTO"
        hash:
          type: string
        merkleComponentHash:
          type: string
        index:
          type: integer
        id:
          type: string
    AccountDTO:
      type: object
      required:
      - address
      - addressHeight
      - publicKey
      - publicKeyHeight
      - mosaics
      - accountType
      - linkedAccountKey
      properties:
        address:
          type: string
          description: |
            The account unique address in hexadecimal.
          example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
        addressHeight:
          $ref: "#/components/schemas/UInt64DTO"
        publicKey:
          type: string
          description: |
            The public key of an account can be used to verify signatures of the
            account. Only accounts that have already published a transaction
            have a public key assigned to the account. Otherwise, the field is
            null.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        publicKeyHeight:
          $ref: "#/components/schemas/UInt64DTO"
        mosaics:
          type: array
          description: |
            The list of mosaics the account owns. The amount is represented in
            absolute amount. Thus a balance of 123456789 for a mosaic with
            divisibility 6 (absolute) means the account owns 123.456789 instead.
          items:
            $ref: "#/components/schemas/MosaicDTO"
        accountType:
          $ref: "#/components/schemas/AccountLinkTypeEnum"
        linkedAccountKey:
          description: |
            The public key of a linked account. The linked account can use|provide balance for delegated harvesting.
          type: string
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
    AccountNamesDTO:
      type: object
      required:
      - address
      - names
      properties:
        address:
          type: string
          description: The address of the account in hexadecimal.
          example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
        names:
          type: array
          description: The mosaic linked namespace names.
          example:
          - alias1
          - alias2
          items:
            type: string
    AccountPropertiesInfoDTO:
      type: object
      required:
      - accountProperties
      properties:
        accountProperties:
          $ref: "#/components/schemas/AccountPropertiesDTO"
    AccountPropertiesDTO:
      type: object
      required:
      - address
      - properties
      properties:
        address:
          type: string
          description: The address of the account in hexadecimal.
          example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
        properties:
          type: array
          items:
            $ref: "#/components/schemas/AccountPropertyDTO"
    AccountPropertyDTO:
      type: object
      required:
      - propertyType
      - values
      properties:
        propertyType:
          $ref: "#/components/schemas/AccountPropertyTypeEnum"
        values:
          type: array
          description: The address, transaction type or mosaic id to filter.
          items:
            oneOf:
            - type: string
            - $ref: "#/components/schemas/UInt64DTO"
            - type: integer
    AccountPropertiesModificationDTO:
      type: object
      required:
      - type
      - values
      properties:
        type:
          $ref: "#/components/schemas/AccountPropertiesModificationTypeEnum"
        values:
          type: array
          description: The address, transaction type or mosaic id to filter.
          items:
            oneOf:
            - type: string
            - $ref: "#/components/schemas/UInt64DTO"
            - type: integer
    NetworkConfigDTO:
      type: object
      required:
      - networkConfig
      properties:
        networkConfig:
          $ref: '#/components/schemas/ConfigDTO'
    ConfigDTO:
      type: object
      required:
      - height
      - networkConfig
      - supportedEntityVersions
      properties:
        height:
          $ref: '#/components/schemas/UInt64DTO'
        networkConfig:
          type: string
          example: "[network]\n\nidentifier = mijin-test\npublicKey = B4F12E7C9F6946091E2CB8B6D3A12B50D17CCBBF646386EA27CE2946A7423DCF\ngenerationHash = 7B631D803F912B00DC0CBED3014BBD17A302BA50B99D233B9C2D9533B842ABDF\n\n"
        supportedEntityVersions:
          type: string
          example: "{\n\t\"entities\": [\n\t\t{\n\t\t\t\"name\": \"Block\",\n\t\t\t\"type\": \"33091\",\n\t\t\t\"supportedVersions\": [3]\n\t\t}]}"
    BlockchainUpgradeDTO:
      type: object
      required:
      - blockchainUpgrade
      properties:
        blockchainUpgrade:
          $ref: '#/components/schemas/UpgradeDTO'
    UpgradeDTO:
      type: object
      required:
      - height
      - blockChainVersion
      properties:
        height:
          $ref: '#/components/schemas/UInt64DTO'
        blockChainVersion:
          $ref: '#/components/schemas/UInt64DTO'
    MetadataModificationDTO:
      type: object
      required:
      - modificationType
      - key
      - value
      properties:
        modificationType:
          $ref: "#/components/schemas/MetadataModificationTypeEnum"
        key:
          type: string
          description: The key of metadata modification.
        value:
          type: string
          description: The value of metadata modification.
    MultisigAccountGraphInfoDTO:
      type: object
      required:
      - level
      - multisigEntries
      properties:
        level:
          type: integer
          description: The level of the multisig account.
          example: 0
        multisigEntries:
          type: array
          description: The array of multisig accounts for this level.
          items:
            $ref: "#/components/schemas/MultisigAccountInfoDTO"
    MultisigAccountInfoDTO:
      type: object
      required:
      - multisig
      properties:
        multisig:
          $ref: "#/components/schemas/MultisigDTO"
    MultisigDTO:
      type: object
      required:
      - account
      - minApproval
      - minRemoval
      - cosignatories
      - multisigAccounts
      properties:
        account:
          type: string
          description: The account public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        accountAddress:
          type: string
          description: The account address in hexadecimal.
          example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
        minApproval:
          type: integer
          description: The number of signatures needed to approve a transaction.
          example: 2
        minRemoval:
          description: The number of signatures needed to remove a cosignatory.
          type: integer
          example: 1
        cosignatories:
          type: array
          description: The array of public keys of the cosignatory accounts.
          example:
          - 5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C
          - AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          items:
            type: string
        multisigAccounts:
          type: array
          description: The array of multisig accounts where the account is cosignatory.
          example:
          - 565059F55E68F904214E8BE1D610B5BBEA4CE46CC13D246D45BC1DAE5D32A0D2
          items:
            type: string
    CosignatoryModificationDTO:
      type: object
      required:
      - modificationType
      - cosignatoryPublicKey
      properties:
        modificationType:
          $ref: "#/components/schemas/MultisigModificationTypeEnum"
        cosignatoryPublicKey:
          type: string
          description: The public key of the cosignatory account.
          example: 5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C
    # Blockchain endpoints
    BlockInfoDTO:
      type: object
      required:
      - meta
      - block
      properties:
        meta:
          $ref: "#/components/schemas/BlockMetaDTO"
        block:
          $ref: "#/components/schemas/BlockDTO"
    BlockMetaDTO:
      type: object
      required:
      - hash
      - generationHash
      - totalFee
      - subCacheMerkleRoots
      - numTransactions
      properties:
        hash:
          type: string
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        generationHash:
          type: string
          example: 876614A913BAA95E64451290BB3BAD476625F0EB27CA7953EC7F802CC9FBB18D
        subCacheMerkleRoots:
          type: array
          items:
            type: string
            format: hex
          example:
          - 782451A35BCE10E5DCB2BBB5A1A8C067F8673DC65EB6BAAE3EE533044BF742CC
          - 646AE657A9717BECF338279C45613C8F64FB69572E22F4CAE2A36097C2190F02
          - 65D0CDEB6F8C29A9B164C64FFBC7AD97DF2BA407FE868E1BBC11983DBFF3FB5A
          - 0
          - 0
          - 0
          - 0
        totalFee:
          $ref: "#/components/schemas/UInt64DTO"
        numTransactions:
          type: integer
          example: 0
        numStatements:
          type: integer
          example: 1
    EntityDTO:
      type: object
      required:
      - signer
      - version
      - type
      properties:
        signer:
          type: string
          description: The public key of the entity signer formatted as hexadecimal.
          example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
        version:
          $ref: "#/components/schemas/NetworkTypeEnum"
        type:
          $ref: "#/components/schemas/EntityTypeEnum"
    VerifiableEntityDTO:
      type: object
      required:
      - signature
      properties:
        signature:
          type: string
          description: |
            The signature of the entity. The signature was generated by the
            signer and can be used to validate tha the entity data was not
            modified by a node.
          example: D8047EB8285077D9900EDD42F4081070DDB26E08E7F15A3E29642C80CF0C7D68340682DC9868C73EB09744D6298146D8DFC02ED47070FC81FB47D6F73B33EF0A
    BlockDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/VerifiableEntityDTO"
      - $ref: "#/components/schemas/EntityDTO"
      - type: object
        required:
        - height
        - timestamp
        - difficulty
        - feeMultiplier
        - previousBlockHash
        - blockTransactionsHash
        - blockReceiptsHash
        - stateHash
        - beneficiary
        - feeInterest
        - feeInterestDenominator
        properties:
          height:
            $ref: "#/components/schemas/UInt64DTO"
          timestamp:
            $ref: "#/components/schemas/UInt64DTO"
          difficulty:
            $ref: "#/components/schemas/UInt64DTO"
          feeMultiplier:
            type: integer
            description: The fee multiplier applied to transactions contained in block.
            example: 0
          previousBlockHash:
            type: string
            description: The hash of the previous block.
            example:
            - 0
          blockTransactionsHash:
            type: string
            description: |
              The transactions included in a block are hashed forming a merkle
              tree. The root of the tree summarizes them.
            example: 8F8C6EB33332F69196AD0D30D7CD90FAC1332089DF460DF0CF4A8A28C1C17AD4
          blockReceiptsHash:
            type: string
            description: |
              The collection of receipts  are hashed into a merkle tree and
              linked

              to a block. The block header stores the root hash.
            example: sZznHmvGSZKIy1Ney2O0tKxJ4sOgk5jYYhqsua1RCRo=
          stateHash:
            type: string
            description: |
              For each block, the state of the blockchain is stored in
              RocksDB,

              forming a patricia tree. The root of the tree summarizes the state of the blockchain for the given block.
            example: 011811795453FA9FBD9DAC969085F8938BBFEDE3A3FDDC0C93B8FD6C4E7B2840
          beneficiary:
            type: string
            description: The public key of the optional beneficiary designated by
              harvester.
            example: 0
          feeInterest:
            type: integer
            description: The part of the transaction fee harvester is willing to get.
              From 0 up to FeeInterestDenominator. The customer gets
              (FeeInterest / FeeInterestDenominator)'th part of the maximum transaction fee.
            example: 0
          feeInterestDenominator:
            type: integer
            description: Denominator of the transaction fee.
            example: 0
    HeightInfoDTO:
      type: object
      required:
      - height
      properties:
        height:
          $ref: "#/components/schemas/UInt64DTO"
    BlockchainScoreDTO:
      type: object
      required:
      - scoreHigh
      - scoreLow
      properties:
        scoreHigh:
          $ref: "#/components/schemas/UInt64DTO"
        scoreLow:
          $ref: "#/components/schemas/UInt64DTO"
    MerkleProofInfoDTO:
      type: object
      required:
      - payload
      - type
      properties:
        payload:
          $ref: "#/components/schemas/merkleProofInfo"
        type:
          type: string
          example: merkleProofInfo
    # Diagnostic endpoints
    StorageInfoDTO:
      type: object
      required:
      - numBlocks
      - numTransactions
      - numAccounts
      properties:
        numBlocks:
          type: integer
          description: The number of blocks stored.
          example: 245053
        numTransactions:
          type: integer
          description: The number of transactions stored.
          example: 58590
        numAccounts:
          type: integer
          description: The number of accounts created.
          example: 177
    StatementsDTO:
      type: object
      description: The collection of transaction statements and resolutions triggered for
        the block requested.
      required:
      - transactionStatements
      - addressResolutionStatements
      - mosaicResolutionStatements
      properties:
        transactionStatements:
          type: array
          description: The array of transaction statements for the block requested.
          items:
            $ref: "#/components/schemas/TransactionStatementDTO"
        addressResolutionStatements:
          type: array
          description: The array of address resolutions for the block requested.
          items:
            $ref: "#/components/schemas/ResolutionStatementDTO"
        mosaicResolutionStatements:
          type: array
          description: The array of mosaic resolutions for the block requested.
          items:
            $ref: "#/components/schemas/ResolutionStatementDTO"
    TransactionStatementDTO:
      type: object
      description: The collection of receipts related to a transaction.
      required:
      - height
      - source
      - receipts
      properties:
        height:
          $ref: "#/components/schemas/UInt64DTO"
        source:
          $ref: "#/components/schemas/SourceDTO"
        receipts:
          type: array
          description: The array of receipts.
          items:
            anyOf:
            - $ref: "#/components/schemas/BalanceTransferReceiptDTO"
            - $ref: "#/components/schemas/BalanceChangeReceiptDTO"
            - $ref: "#/components/schemas/ArtifactExpiryReceiptDTO"
            - $ref: "#/components/schemas/InflationReceiptDTO"
    ResolutionStatementDTO:
      type: object
      description: A resolution statement keeps the relation between a namespace alias used
        in a transaction and the real address or mosaicId.
      required:
      - height
      - unresolved
      - resolutionEntries
      properties:
        height:
          $ref: "#/components/schemas/UInt64DTO"
        unresolved:
          $ref: "#/components/schemas/UInt64DTO"
        resolutionEntries:
          type: array
          description: The array of resolution entries linked to the unresolved
            namespaceId. It is an array instead of a single UInt64 field since
            within one block the resolution might change for different sources
            due to alias related transactions.
          items:
            $ref: "#/components/schemas/ResolutionEntryDTO"
    ResolutionEntryDTO:
      type: object
      required:
      - source
      - resolved
      properties:
        source:
          $ref: "#/components/schemas/SourceDTO"
        resolved:
          $ref: "#/components/schemas/UInt64DTO"
    SourceDTO:
      type: object
      description: The transaction that triggered the receipt.
      required:
      - primaryId
      - secondaryId
      properties:
        primaryId:
          type: integer
          description: The transaction index within the block.
          example: 1
        secondaryId:
          type: integer
          description: The transaction index inside within the aggregate transaction. If
            the transaction is not an inner transaction, then the secondary id
            is set to 0.
          example: 0
    ReceiptDTO:
      type: object
      required:
      - version
      - type
      properties:
        version:
          type: integer
          description: The version of the receipt.
        type:
          $ref: "#/components/schemas/ReceiptTypeEnum"
    BalanceTransferReceiptDTO:
      type: object
      description: The invisible state change triggered a mosaic transfer.
      allOf:
      - $ref: "#/components/schemas/ReceiptDTO"
      - type: object
        required:
        - sender
        - recipient
        - mosaicId
        - amount
        properties:
          sender:
            type: string
            description: The public key of the sender.
            example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
          recipient:
            type: string
            description: The public key of the recipient.
            example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
          mosaicId:
            $ref: "#/components/schemas/UInt64DTO"
          amount:
            $ref: "#/components/schemas/UInt64DTO"
    BalanceChangeReceiptDTO:
      type: object
      description: The invisible state change changed an account balance.
      allOf:
      - $ref: "#/components/schemas/ReceiptDTO"
      - type: object
        required:
        - account
        - mosaicId
        - amount
        properties:
          account:
            type: string
            description: The target account public key.
            example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
          mosaicId:
            $ref: "#/components/schemas/UInt64DTO"
          amount:
            $ref: "#/components/schemas/UInt64DTO"
    ArtifactExpiryReceiptDTO:
      type: object
      description: An artifact namespace or mosaic expired.
      allOf:
      - $ref: "#/components/schemas/ReceiptDTO"
      - type: object
        required:
        - artifactId
        properties:
          artifactId:
            $ref: "#/components/schemas/UInt64DTO"
    InflationReceiptDTO:
      type: object
      description: Native currency mosaics were created due to inflation.
      allOf:
      - $ref: "#/components/schemas/ReceiptDTO"
      - type: object
        required:
        - mosaicId
        - amount
        properties:
          mosaicId:
            $ref: "#/components/schemas/UInt64DTO"
          amount:
            $ref: "#/components/schemas/UInt64DTO"
    ServerDTO:
      type: object
      required:
      - serverInfo
      properties:
        serverInfo:
          $ref: "#/components/schemas/ServerInfoDTO"
    ServerInfoDTO:
      type: object
      required:
      - restVersion
      - sdkVersion
      properties:
        restVersion:
          type: string
          example: 1.0.14
          description: The catapult-rest component version.
        sdkVersion:
          type: string
          example: 0.7.14
          description: The catapult-sdk component version.
    # Metadata endpoints
    MosaicMetaDTO:
      type: object
      required:
      - id
      properties:
        id:
          type: string
    MetadataDTO:
      type: object
      required:
      - metadataType
      - fields
      properties:
        metadataType:
          type: integer
          example: 1
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldDTO'
    FieldDTO:
      type: object
      required:
      - key
      - value
      properties:
        key:
          type: string
          example: "jora"
        value:
          type: string
          example: "I Love you"
    AddressMetadataInfoDTO:
      type: object
      required:
      - metadata
      properties:
        metadata:
          $ref: '#/components/schemas/AddressMetadataDTO'
    AddressMetadataDTO:
      allOf:
      - $ref: '#/components/schemas/MetadataDTO'
      - type: object
        required:
        - metadataId
        properties:
          metadataId:
            type: string
            example: "90936FF3536858CBEA8EE0EAAB99FE9EC4EF5EF1F66366569A"
    MosaicMetadataInfoDTO:
      type: object
      required:
      - metadata
      properties:
        metadata:
          $ref: '#/components/schemas/MosaicMetadataDTO'
    MosaicMetadataDTO:
      allOf:
      - $ref: '#/components/schemas/MetadataDTO'
      - type: object
        required:
        - metadataId
        properties:
          metadataType:
            type: integer
            example: 2
          metadataId:
            $ref: '#/components/schemas/UInt64DTO'
    NamespaceMetadataInfoDTO:
      type: object
      required:
      - metadata
      properties:
        metadata:
          $ref: '#/components/schemas/NamespaceMetadataDTO'
    NamespaceMetadataDTO:
      allOf:
      - $ref: '#/components/schemas/MetadataDTO'
      - type: object
        required:
        - metadataId
        properties:
          metadataType:
            type: integer
            example: 3
          metadataId:
            $ref: '#/components/schemas/UInt64DTO'

    # Metadata Nem enpoints
    MetadataNemPage:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          description: Array of metadata entries.
          items:
            $ref: '#/components/schemas/MetadataNemInfoDTO'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Pagination:
      type: object
      required:
        - pageNumber
        - pageSize
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
    MetadataNemInfoDTO:
      type: object
      required:
      - metadata
      properties:
        metadataEntry:
          $ref: '#/components/schemas/MetadataNemDTO'
        id:
            type: string
            example: "610AB681D05149F167E3EE94"      
    MetadataNemDTO:
      allOf:
      - type: object
        required:
        - metadataId
        properties:
          version:
            type: integer
            example: 1
          compositeHash:
            type: string
            example: "764B3AA022FB929CAA204670A817205DC08F2B172D501F36D4F0EC4EA50AFAE9"
          sourceAddress:
            type: string
            example: "90FDBE9800BA25E21C440AF033A51141D8CC012C63327DE2A2"
          targetKey:
            type: string
            example: "570BE65B22A4E52EC3E57421F2E493B32C046B8B795282ED69EA53806F44FFFF"
          scopedMetadataKey:
            $ref: '#/components/schemas/UInt64DTO'
          targetId:
            $ref: '#/components/schemas/UInt64DTO'
          metadataType:
            type: integer
            example: 0
          valueSize:
            type: integer
            example: 10
          value:
            type: string
            example: "48656C6C6F2068656C6C"

    # Mosaic enpoints
    MosaicDTO:
      type: object
      required:
      - id
      - amount
      properties:
        id:
          $ref: "#/components/schemas/UInt64DTO"
        amount:
          $ref: "#/components/schemas/UInt64DTO"
    MosaicRichListDTO:
      type: object
      required:
      - address
      - amount
      properties:
        address:
          type: string
          example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
        publicKey:
          type: string
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        amount:
          $ref: "#/components/schemas/UInt64DTO"
    MosaicInfoDTO:
      type: object
      required:
      - meta
      - mosaic
      properties:
        meta:
          $ref: "#/components/schemas/MosaicMetaDTO"
        mosaic:
          $ref: "#/components/schemas/MosaicDefinitionDTO"
    MosaicLevyInfoDTO:
      type: object
      properties:
        type:
          type: integer
          description: The type of levy.
          example: 1
          enum: [1, 2]
        recipient:
          type: string
          description: The address of the mosaic levy recipient.
          example: 906CBD9B8EC88014F7A4181B00C1837646BD46E504E3D72C44
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        fee:
          $ref: "#/components/schemas/UInt64DTO"
    MosaicDefinitionDTO:
      type: object
      required:
      - mosaicId
      - supply
      - height
      - owner
      - properties
      - revision
      properties:
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        supply:
          $ref: "#/components/schemas/UInt64DTO"
        height:
          $ref: "#/components/schemas/UInt64DTO"
        owner:
          type: string
          description: The public key of the mosaic owner.
          example: EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85
        revision:
          type: integer
          description: The number of definitions for the same mosaic.
          example: 1
        properties:
          type: array
          items:
            $ref: "#/components/schemas/MosaicPropertyDTO"
    MosaicPropertyDTO:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MosaicPropertyIdEnum"
        value:
          $ref: "#/components/schemas/UInt64DTO"
    MosaicNamesDTO:
      type: object
      required:
      - mosaicId
      - names
      properties:
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        names:
          type: array
          description: The mosaic linked namespace names.
          example:
          - cat.currency
          items:
            type: string
    # Namespace endpoints
    NamespaceMetaDTO:
      type: object
      required:
      - id
      - active
      - index
      properties:
        id:
          type: string
        active:
          type: boolean
        index:
          type: integer
    NamespaceInfoDTO:
      type: object
      required:
      - meta
      - namespace
      properties:
        meta:
          $ref: "#/components/schemas/NamespaceMetaDTO"
        namespace:
          $ref: "#/components/schemas/NamespaceDTO"
    NamespaceDTO:
      type: object
      required:
      - owner
      - ownerAddress
      - startHeight
      - endHeight
      - depth
      - level0
      - type
      - alias
      - parentId
      properties:
        owner:
          type: string
          description: The public key of the owner of the namespace.
          example: EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85
        ownerAddress:
          type: string
          description: The address of the owner of the namespace in hexadecimal.
          example: 906CBD9B8EC88014F7A4181B00C1837646BD46E504E3D72C44
        startHeight:
          $ref: "#/components/schemas/UInt64DTO"
        endHeight:
          $ref: "#/components/schemas/UInt64DTO"
        depth:
          type: integer
          description: The level of the namespace.
          example: 1
        level0:
          $ref: "#/components/schemas/UInt64DTO"
        level1:
          $ref: "#/components/schemas/UInt64DTO"
        level2:
          $ref: "#/components/schemas/UInt64DTO"
        type:
          $ref: "#/components/schemas/NamespaceTypeEnum"
        alias:
          $ref: "#/components/schemas/AliasDTO"
        parentId:
          $ref: "#/components/schemas/UInt64DTO"
    NamespaceNameDTO:
      type: object
      required:
      - namespaceId
      - name
      properties:
        namespaceId:
          $ref: "#/components/schemas/UInt64DTO"
        name:
          type: string
          description: The full name of the namespace.
          example: cat.currency
    AliasDTO:
      type: object
      required:
      - type
      properties:
        type:
          $ref: "#/components/schemas/AliasTypeEnum"
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        address:
          type: string
          description: The aliased address in hexadecimal.

    # Transaction endpoints
    TransactionMetaDTO:
      type: object
      required:
      - height
      - hash
      - merkleComponentHash
      - index
      - id
      properties:
        height:
          $ref: "#/components/schemas/UInt64DTO"
        hash:
          type: string
        merkleComponentHash:
          type: string
        index:
          type: integer
        id:
          type: string
    TransactionInfoDTO:
      type: object
      required:
      - meta
      - transaction
      properties:
        meta:
          $ref: "#/components/schemas/TransactionMetaDTO"
        transaction:
          anyOf:
          - $ref: "#/components/schemas/BlockchainUpgradeTransactionDTO"
          - $ref: "#/components/schemas/NetworkConfigTransactionDTO"
          - $ref: "#/components/schemas/AddressMetadataTransactionDTO"
          - $ref: "#/components/schemas/MosaicMetadataTransactionDTO"
          - $ref: "#/components/schemas/NamespaceMetadataTransactionDTO"
          - $ref: "#/components/schemas/MosaicDefinitionTransactionDTO"
          - $ref: "#/components/schemas/MosaicSupplyChangeTransactionDTO"
          - $ref: "#/components/schemas/RegisterNamespaceTransactionDTO"
          - $ref: "#/components/schemas/AddressAliasTransactionDTO"
          - $ref: "#/components/schemas/MosaicAliasTransactionDTO"
          - $ref: "#/components/schemas/TransferTransactionDTO"
          - $ref: "#/components/schemas/ModifyMultisigAccountTransactionDTO"
          - $ref: "#/components/schemas/AggregateTransactionDTO"
          - $ref: "#/components/schemas/HashLockTransactionDTO"
          - $ref: "#/components/schemas/AccountPropertiesTransactionDTO"
          - $ref: "#/components/schemas/SecretLockTransactionDTO"
          - $ref: "#/components/schemas/SecretProofTransactionDTO"
          - $ref: "#/components/schemas/AccountLinkTransactionDTO"
          - $ref: "#/components/schemas/AddExchangeOfferTransactionDTO"
          - $ref: "#/components/schemas/ExchangeOfferTransactionDTO"
          - $ref: "#/components/schemas/RemoveExchangeOfferTransactionDTO"
          - $ref: "#/components/schemas/PrepareDriveTransactionDTO"
          - $ref: "#/components/schemas/JoinToDriveTransactionDTO"
          - $ref: "#/components/schemas/DriveFileSystemTransactionDTO"
          - $ref: "#/components/schemas/FilesDepositTransactionDTO"
          - $ref: "#/components/schemas/EndDriveTransactionDTO"
          - $ref: "#/components/schemas/DriveFilesRewardTransactionDTO"
          - $ref: "#/components/schemas/StartDriveVerificationTransactionDTO"
          - $ref: "#/components/schemas/EndDriveVerificationTransactionDTO"
    EmbeddedTransactionMetaDTO:
      type: object
      required:
      - height
      - hash
      - merkleComponentHash
      - index
      - id
      properties:
        height:
          $ref: "#/components/schemas/UInt64DTO"
        hash:
          type: string
        merkleComponentHash:
          type: string
        index:
          type: integer
        id:
          type: string
    EmbeddedTransactionInfoDTO:
      type: object
      required:
      - meta
      - transaction
      properties:
        meta:
          $ref: "#/components/schemas/EmbeddedTransactionMetaDTO"
        transaction:
          anyOf:
          - $ref: "#/components/schemas/EmbeddedBlockchainUpgradeTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedNetworkConfigTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedAddressMetadataTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedMosaicMetadataTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedNamespaceMetadataTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedMosaicDefinitionTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedMosaicSupplyChangeTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedRegisterNamespaceTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedAddressAliasTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedMosaicAliasTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedTransferTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedModifyMultisigAccountTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedHashLockTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedAccountPropertiesTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedSecretLockTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedSecretProofTransactionDTO"
          - $ref: "#/components/schemas/EmbeddedAccountLinkTransactionDTO"
    TransactionBodyDTO:
      type: object
      required:
      - max_fee
      - deadline
      properties:
        max_fee:
          $ref: "#/components/schemas/UInt64DTO"
        deadline:
          $ref: "#/components/schemas/UInt64DTO"
    TransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/VerifiableEntityDTO"
      - $ref: "#/components/schemas/EntityDTO"
      - $ref: "#/components/schemas/TransactionBodyDTO"
    EmbeddedTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EntityDTO"
      - $ref: "#/components/schemas/TransactionBodyDTO"
    BlockchainUpgradeBodyDTO:
      type: object
      required:
      - upgradePeriod
      - newBlockChainVersion
      properties:
        upgradePeriod:
          $ref: "#/components/schemas/UInt64DTO"
        newBlockChainVersion:
          $ref: "#/components/schemas/UInt64DTO"
    BlockchainUpgradeTransactionDTO:
      type: object
      description: Transaction that change version of blockchain.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/BlockchainUpgradeBodyDTO"
    EmbeddedBlockchainUpgradeTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/BlockchainUpgradeBodyDTO"
    NetworkConfigBodyDTO:
      type: object
      required:
      - applyHeightDelta
      - networkConfig
      - supportedEntityVersions
      properties:
        applyHeightDelta:
          $ref: "#/components/schemas/UInt64DTO"
        networkConfig:
          type: string
          description: Network config like a raw text.
        supportedEntityVersions:
          type: string
          description: Allowed versions of transaction in json format.
    NetworkConfigTransactionDTO:
      type: object
      description: Transaction that updates config.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/NetworkConfigBodyDTO"
    EmbeddedNetworkConfigTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/NetworkConfigBodyDTO"
    AddressMetadataBodyDTO:
      type: object
      required:
      - metadataId
      - metadataType
      - modifications
      properties:
        metadataId:
          type: string
          description: The address in hexadecimal.
        metadataType:
          $ref: "#/components/schemas/MetadataTypeEnum"
        modifications:
          type: array
          description: The array of metadata modifications.
          items:
            $ref: "#/components/schemas/MetadataModificationDTO"
    AddressMetadataTransactionDTO:
      type: object
      description: Transaction that addes metadata to account.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/AddressMetadataBodyDTO"
    EmbeddedAddressMetadataTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/AddressMetadataBodyDTO"
    MosaicMetadataBodyDTO:
      type: object
      required:
      - metadataId
      - metadataType
      - modifications
      properties:
        metadataId:
          $ref: "#/components/schemas/UInt64DTO"
          description: Mosaic id.
        metadataType:
          $ref: "#/components/schemas/MetadataTypeEnum"
        modifications:
          type: array
          description: The array of metadata modifications.
          items:
            $ref: "#/components/schemas/MetadataModificationDTO"
    MosaicMetadataTransactionDTO:
      type: object
      description: Transaction that addes metadata to mosaic.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/MosaicMetadataBodyDTO"
    EmbeddedMosaicMetadataTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/MosaicMetadataBodyDTO"
    NamespaceMetadataBodyDTO:
      type: object
      required:
      - metadataId
      - metadataType
      - modifications
      properties:
        metadataId:
          $ref: "#/components/schemas/UInt64DTO"
          description: Namespace id.
        metadataType:
          $ref: "#/components/schemas/MetadataTypeEnum"
        modifications:
          type: array
          description: The array of metadata modifications.
          items:
            $ref: "#/components/schemas/MetadataModificationDTO"
    NamespaceMetadataTransactionDTO:
      type: object
      description: Transaction that addes metadata to namespace.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/NamespaceMetadataBodyDTO"
    EmbeddedNamespaceMetadataTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/NamespaceMetadataBodyDTO"
    MosaicDefinitionTransactionBodyDTO:
      type: object
      required:
      - mosaicNonce
      - mosaicId
      - properties
      properties:
        mosaicNonce:
          type: integer
          description: Random nonce used to generate the mosaic id.
          example: 0
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/MosaicPropertyDTO"
    MosaicDefinitionTransactionDTO:
      type: object
      description: Transaction that creates a new mosaic.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/MosaicDefinitionTransactionBodyDTO"
    EmbeddedMosaicDefinitionTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/MosaicDefinitionTransactionBodyDTO"
    MosaicSupplyChangeTransactionBodyDTO:
      type: object
      required:
      - mosaicId
      - direction
      - delta
      properties:
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        direction:
          $ref: "#/components/schemas/MosaicDirectionEnum"
        delta:
          $ref: "#/components/schemas/UInt64DTO"
    MosaicSupplyChangeTransactionDTO:
      type: object
      description: Transaction to increase or decrease a mosaic’s supply.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/MosaicSupplyChangeTransactionBodyDTO"
    EmbeddedMosaicSupplyChangeTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/MosaicSupplyChangeTransactionBodyDTO"
    RegisterNamespaceTransactionBodyDTO:
      type: object
      required:
      - namespaceType
      - duration
      - namespaceId
      - name
      - parentId
      properties:
        namespaceType:
          $ref: "#/components/schemas/NamespaceTypeEnum"
        duration:
          $ref: "#/components/schemas/UInt64DTO"
        namespaceId:
          $ref: "#/components/schemas/UInt64DTO"
        name:
          type: string
          description: The unique namespace name.
        parentId:
          $ref: "#/components/schemas/UInt64DTO"
    RegisterNamespaceTransactionDTO:
      type: object
      description: Transaction that creates or renew a namespace.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/RegisterNamespaceTransactionBodyDTO"
    EmbeddedRegisterNamespaceTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/RegisterNamespaceTransactionBodyDTO"
    AddressAliasTransactionBodyDTO:
      type: object
      required:
      - aliasAction
      - namespaceId
      - address
      properties:
        aliasAction:
          $ref: "#/components/schemas/AliasActionEnum"
        namespaceId:
          $ref: "#/components/schemas/UInt64DTO"
        address:
          type: string
          description: The aliased address in hexadecimal.
    AddressAliasTransactionDTO:
      type: object
      description: Transaction that attaches a namespace to an account.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/AddressAliasTransactionBodyDTO"
    EmbeddedAddressAliasTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/AddressAliasTransactionBodyDTO"
    MosaicAliasTransactionBodyDTO:
      type: object
      required:
      - aliasAction
      - namespaceId
      - mosaicId
      properties:
        aliasAction:
          $ref: "#/components/schemas/AliasActionEnum"
        namespaceId:
          $ref: "#/components/schemas/UInt64DTO"
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
    MosaicAliasTransactionDTO:
      type: object
      description: Transaction that attaches a namespace to a mosaic.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/MosaicAliasTransactionBodyDTO"
    EmbeddedMosaicAliasTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/MosaicAliasTransactionBodyDTO"
    MessageDTO:
      type: object
      required:
      - type
      - payload
      properties:
        type:
          $ref: "#/components/schemas/MessageTypeEnum"
        payload:
          type: string
          description: The message content in hexadecimal.
    TransferTransactionBodyDTO:
      type: object
      required:
      - recipient
      - mosaics
      - message
      properties:
        recipient:
          type: string
          description: If the bit 0 of byte 0 is not set (like in 0x90), then it is a
            regular address. Else (e.g. 0x91) it represents a namespace id which
            starts at byte 1.
          example: 909B5339654B16CF86F55EAEB1C8708A033286B3EBB314A792
        mosaics:
          type: array
          description: The array of mosaics sent to the recipient. If the most significant
            bit of byte 0 is set, a namespaceId (alias) is used instead of a
            instead of a mosaicId corresponds to a mosaicId.
          items:
            $ref: "#/components/schemas/MosaicDTO"
        message:
          $ref: "#/components/schemas/MessageDTO"
    TransferTransactionDTO:
      type: object
      description: Transaction that transfers mosaics and messages to another account.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/TransferTransactionBodyDTO"
    EmbeddedTransferTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/TransferTransactionBodyDTO"
    ModifyMultisigAccountTransactionBodyDTO:
      type: object
      required:
      - minRemovalDelta
      - minApprovalDelta
      - modifications
      properties:
        minRemovalDelta:
          type: integer
          description: |
            The number of signatures needed to remove a cosignatory. If we are
            modifying an existing multisig account, this indicates the relative
            change of the minimum cosignatories.
          example: 1
        minApprovalDelta:
          type: integer
          description: |
            The number of signatures needed to approve a transaction. If we are
            modifying an existing multisig account, this indicates the relative
            change of the minimum cosignatories.
          example: 1
        modifications:
          type: array
          description: The array of cosignatory accounts to add or delete.
          items:
            $ref: "#/components/schemas/CosignatoryModificationDTO"
    ModifyMultisigAccountTransactionDTO:
      type: object
      description: Transaction that creates or modifies a multisig account.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/ModifyMultisigAccountTransactionBodyDTO"
    EmbeddedModifyMultisigAccountTransactionDTO:
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/ModifyMultisigAccountTransactionBodyDTO"
    AggregateTransactionBodyDTO:
      type: object
      required:
      - cosignatures
      - transactions
      properties:
        cosignatures:
          type: array
          description: An array of transaction cosignatures.
          items:
            $ref: "#/components/schemas/CosignatureDTO"
        transactions:
          type: array
          description: The array of transactions initiated by different accounts.
          items:
            $ref: "#/components/schemas/EmbeddedTransactionInfoDTO"
    AggregateTransactionDTO:
      type: object
      description: Transaction that combines multiple transactions together.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/AggregateTransactionBodyDTO"
    CosignatureDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/VerifiableEntityDTO"
      - type: object
        required:
        - signer
        properties:
          signer:
            type: string
            description: The public key of the transaction signer.
            example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
    HashLockTransactionBodyDTO:
      type: object
      required:
      - mosaic
      - duration
      - hash
      properties:
        mosaic:
          $ref: "#/components/schemas/MosaicDTO"
        duration:
          $ref: "#/components/schemas/MosaicDTO"
        hash:
          type: string
          description: |
            The aggregate bonded transaction hash that has to be confirmed
            before unlocking the mosaics.
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
    HashLockTransactionDTO:
      type: object
      description: Transaction to lock funds before sending an aggregate bonded transaction.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/HashLockTransactionBodyDTO"
    EmbeddedHashLockTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/HashLockTransactionDTO"
    AccountPropertiesTransactionBodyDTO:
      type: object
      required:
      - propertyType
      - modifications
      properties:
        propertyType:
          $ref: "#/components/schemas/AccountPropertyTypeEnum"
        modifications:
          type: array
          items:
            $ref: "#/components/schemas/AccountPropertiesModificationDTO"
    AccountPropertiesTransactionDTO:
      type: object
      description: Transaction that prevents receiving transactions from undesired
        addresses, mosaics or sending certain transaction types.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/AccountPropertiesTransactionBodyDTO"
    EmbeddedAccountPropertiesTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/AccountPropertiesTransactionBodyDTO"
    SecretLockTransactionBodyDTO:
      type: object
      required:
      - duration
      - mosaicId
      - amount
      - hashAlgorithm
      - secret
      - recipient
      properties:
        duration:
          $ref: "#/components/schemas/UInt64DTO"
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        amount:
          $ref: "#/components/schemas/UInt64DTO"
        hashAlgorithm:
          $ref: "#/components/schemas/HashAlgorithmEnum"
        secret:
          type: string
          description: The proof hashed.
          example: 759DE013523D2C36F54BA184611AC887C6C994412E28B35221098E084050249B
        recipient:
          type: string
          description: The address in hexadecimal that will receive the funds once the
            transaction is unlocked.
          example: 90829855740901BAA6EF35C91CF00D0059212BF49FBAEC3277
    SecretLockTransactionDTO:
      type: object
      description: Transaction that sends mosaics to a recipient if the proof used is
        revealed. If the duration is reached, the locked funds go back to the
        sender of the transaction.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/SecretLockTransactionBodyDTO"
    EmbeddedSecretLockTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/SecretLockTransactionBodyDTO"
    SecretProofTransactionBodyDTO:
      type: object
      required:
      - hashAlgorithm
      - secret
      - proof
      properties:
        hashAlgorithm:
          $ref: "#/components/schemas/HashAlgorithmEnum"
        secret:
          type: string
          description: The proof hashed.
          example: 759DE013523D2C36F54BA184611AC887C6C994412E28B35221098E084050249B
        recipient:
          type: string
          description: The address in hexadecimal that received the funds.
          example: 90829855740901BAA6EF35C91CF00D0059212BF49FBAEC3277
        proof:
          type: string
          description: The original random set of bytes.
    SecretProofTransactionDTO:
      type: object
      description: Transaction that revealed a proof.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/SecretProofTransactionBodyDTO"
    EmbeddedSecretProofTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/SecretProofTransactionBodyDTO"
    AccountLinkTransactionBodyDTO:
      type: object
      required:
      - remoteAccountKey
      - action
      properties:
        remoteAccountKey:
          type: string
          description: The public key of the remote account.
        action:
          $ref: "#/components/schemas/LinkActionEnum"
    AccountLinkTransactionDTO:
      type: object
      description: Delegates the account importance score to a proxy account.
      allOf:
      - $ref: "#/components/schemas/TransactionDTO"
      - $ref: "#/components/schemas/AccountLinkTransactionBodyDTO"
    EmbeddedAccountLinkTransactionDTO:
      type: object
      allOf:
      - $ref: "#/components/schemas/EmbeddedTransactionDTO"
      - $ref: "#/components/schemas/AccountLinkTransactionBodyDTO"
    AnnounceTransactionInfoDTO:
      type: object
      required:
      - message
      properties:
        message:
          type: string
    TransactionStatusDTO:
      type: object
      required:
      - status
      properties:
        group:
          type: string
        status:
          type: string
        hash:
          type: string
        deadline:
          $ref: "#/components/schemas/UInt64DTO"
        height:
          $ref: "#/components/schemas/UInt64DTO"
      example: 0
    # Network endpoints
    NetworkTypeDTO:
      type: object
      required:
      - name
      - description
      properties:
        name:
          type: string
          description: The name of the network.
          example: mijinTest
        description:
          type: string
          description: A short text describing the network.
          example: catapult development network

    # Exchange endpoints
    AddExchangeOfferTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - offers
      properties:
        offers:
          type: array
          items:
            $ref: "#/components/schemas/AddExchangeOfferTransactionBodyDTO"
    ExchangeOfferTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - offers
      properties:
        offers:
          type: array
          items:
            $ref: "#/components/schemas/ExchangeOfferTransactionBodyDTO"
    RemoveExchangeOfferTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - offers
      properties:
        offers:
          type: array
          items:
            $ref: "#/components/schemas/RemoveExchangeOfferTransactionBodyDTO"
    AddExchangeOfferTransactionBodyDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/OfferDTO"
      required:
        - duration
      properties:
        duration:
            $ref: "#/components/schemas/UInt64DTO"
    ExchangeOfferTransactionBodyDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/OfferDTO"
      required:
        - owner
      properties:
        owner:
          type: string
          example: "EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85"
    RemoveExchangeOfferTransactionBodyDTO:
      type: object
      required:
        - mosaicId
        - offerType
      properties:
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        offerType:
          $ref: "#/components/schemas/OfferTypeEnum"
    OfferDTO:
      type: object
      required: 
        - mosaicId
        - mosaicAmount
        - cost
        - type
      properties:
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        mosaicAmount:
          $ref: "#/components/schemas/UInt64DTO"
        cost:
          $ref: "#/components/schemas/UInt64DTO"
        type:
          $ref: "#/components/schemas/OfferTypeEnum"
    AccountExchangeDTO:
      type: object
      required:
        - owner
        - ownerAddress
        - buyOffers
        - sellOffers
      properties:
        owner:
          type: string
          description: The public key (accountId) of the owner.
          example: "EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85"
        ownerAddress:
          type: string
          description: The address of the owner.
          example: "906CBD9B8EC88014F7A4181B00C1837646BD46E504E3D72C44"
        buyOffers:
          type: array
          items:
            $ref: "#/components/schemas/OfferInfoDTO"
        sellOffers:
          type: array
          items:
            $ref: "#/components/schemas/OfferInfoDTO"
    ExchangesDTO:
      type: object
      required:
        - mosaicId
        - amount
        - initialAmount
        - initialCost
        - deadline
        - price
        - offer
        - owner
        - type 
      properties:
        mosaicId:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        amount:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        initialAmount:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        initialCost:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        deadline:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        price:
          type: number
          example: 1.5
        owner:
          type: string
          example: "D9A659A3AA42FD62BE88E1D96B0F10EB91F6097F8D24EC8FD7C94EC6455735EC"
        type:
          type: integer
          example: 0      
    OfferInfoDTO:
      type: object
      required: 
        - mosaicId
        - amount
        - initialAmount
        - initialCost
        - deadline
        - price
      properties:
        mosaicId:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        amount:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        initialAmount:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        initialCost:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        deadline:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        price:
          type: number
          example: 1.5

    # Service endpoints
    PrepareDriveTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/PrepareDriveTransactionBodyDTO"
    JoinToDriveTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - driveKey
      properties:
        driveKey:
          type: string
          example: "5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C"
    DriveFileSystemTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/DriveFileSystemTransactionBodyDTO"
    FilesDepositTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/FilesDepositTransactionBodyDTO"
    EndDriveTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - driveKey
      properties:
        driveKey:
          type: string
          example: "5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C"
    DriveFilesRewardTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - uploadInfos
      properties:
        uploadInfos:
          type: array
          items:
            $ref: "#/components/schemas/UploadInfoDTO"
    StartDriveVerificationTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - driveKey
      properties:
        driveKey:
          type: string
          example: "5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C"
    EndDriveVerificationTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - verificationFailures
      properties:
        verificationFailures:
          type: array
          items: 
            $ref: "#/components/schemas/FailureVerificationDTO"
    PrepareDriveTransactionBodyDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/OfferDTO"
      required:
        - owner
        - duration
        - billingPeriod
        - billingPrice
        - driveSize
        - replicas
        - minReplicators
        - percentApprovers
      properties:
        owner:
          type: string
          description: The public key of the owner of the drive.
          example: "EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85"
        duration:
            $ref: "#/components/schemas/UInt64DTO"
        billingPeriod: 
          $ref: "#/components/schemas/UInt64DTO"
        billingPrice: 
          $ref: "#/components/schemas/UInt64DTO"
        driveSize:
          $ref: "#/components/schemas/UInt64DTO"
        replicas: 
          type: integer
          example: 3
        minReplicators: 
          type: integer
          example: 2
        percentApprovers: 
          type: integer
          example: 67
    DriveFileSystemTransactionBodyDTO:
      required:
        - driveKey
        - rootHash
        - xorRootHash
        - addActionsCount
        - removeActionsCount
        - addActions
        - removeActions
      properties:
        driveKey:
          type: string
          example: "5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C"
        rootHash:
          $ref: "#/components/schemas/HashDTO"
        xorRootHash:
          $ref: "#/components/schemas/HashDTO"
        addActionsCount:
          type: integer
          example: 1
        removeActionsCount:
          type: integer
          example: 1
        addActions:
          type: array
          items:
            $ref: "#/components/schemas/DriveFileSystemAddActionDTO"
        removeActions:
          type: array
          items:
            $ref: "#/components/schemas/DriveFileSystemAddActionDTO"
    FilesDepositTransactionBodyDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
      required:
        - driveKey
        - filesCount
        - files
      properties:
        driveKey:
          type: string
          example: "5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C"
        filesCount:
          type: integer
          example: 1
        files:
          type: array
          items:
            $ref: "#/components/schemas/FileDepositDTO"
    DriveFileSystemAddActionDTO:
      type: object
      required:
        - fileHash
        - fileSize
      properties:
        fileHash:
          $ref: "#/components/schemas/HashDTO"
        fileSize:
          $ref: "#/components/schemas/UInt64DTO"
    FileDepositDTO:
      type: object 
      required:
        - fileHash
      properties:
        fileHash:
          $ref: "#/components/schemas/HashDTO"
    UploadInfoDTO:
      type: object
      required:
        - participant
        - uploaded
      properties:
        participant:
          type: string
          example: "EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390"
        uploaded:
          $ref: "#/components/schemas/UInt64DTO"
    FailureVerificationDTO:
      type: object
      required:
        - replicator
        - blockHashes
      properties:
        replicator:
          type: string
          example: "EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390"
        blockHashes:
          type: array
          items:
            $ref: "#/components/schemas/HashDTO"

    DrivesArray:
      type: array
      items:
        properties:
          drive:
            $ref: "#/components/schemas/DriveDTO"
    DriveDTO:
      type: object
      required: 
        - multisig
        - multisigAddress
        - start
        - end
        - state
        - owner
        - rootHash
        - duration
        - billingPeriod
        - billingPrice
        - size
        - occupiedSpace
        - replicas
        - minReplicators
        - percentApprovers
        - billingHistory
        - files
        - replicators
        - removedReplicators
        - uploadPayments
      properties:
        multisig:
          type: string
          example: "415C7C61822B063F62A4876A6F6BA2DAAE114AB298D7AC7FC56FDBA95872C309"
        multisigAddress:
          type: string
          example: "9048760066A50F0F65820D3008A79CF73E1034A564BF44AB3E"
        start: 
          $ref: "#/components/schemas/UInt64DTO" 
        end: 
          $ref: "#/components/schemas/UInt64DTO"
        state: 
          type: integer
          example: 1
        owner: 
          type: string
          example: "6A98356A93F288DC198F8932C2BEAF57F7FFDC51BC9267814C6BA0FB60B9A84A"
        rootHash: 
          type: string
          example: "0100000000000000000000000000000000000000000000000000000000000000"
        duration: 
          $ref: "#/components/schemas/UInt64DTO"
        billingPeriod: 
          $ref: "#/components/schemas/UInt64DTO"
        billingPrice: 
          $ref: "#/components/schemas/UInt64DTO"
        size: 
          $ref: "#/components/schemas/UInt64DTO"
        occupiedSpace: 
          $ref: "#/components/schemas/UInt64DTO"
        replicas: 
          type: integer
          example: 3
        minReplicators: 
          type: integer
          example: 2
        percentApprovers: 
          type: integer
          example: 67
        billingHistory: 
          type: array
          items:
            $ref: "#/components/schemas/BillingHistoryDTO"
        files: 
          type: array
          items:
            $ref: "#/components/schemas/FileDTO"
        replicators: 
          type: array
          items:
            $ref: "#/components/schemas/ReplicatorsDTO"
        removedReplicators: 
          type: array
          items: {}
          example: []
        uploadPayments: 
          type: array
          items:
            $ref: "#/components/schemas/PaymentsDTO"
    BillingHistoryDTO:
      type: object
      required: 
        - start
        - end
        - payments
      properties:
        start: 
          $ref: "#/components/schemas/UInt64DTO" 
        end: 
          $ref: "#/components/schemas/UInt64DTO"
        payments:
          type: array
          items:
            $ref: "#/components/schemas/PaymentsDTO"
    PaymentsDTO:
      type: object
      required: 
        - receiver
        - amount
        - height
      properties:
        receiver:
          type: string
          example: "4C8F05950159B086D67DB4394FCC627C9313A0DFD48035042F8572075843B661"
        amount:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
        height:
          type: array
          items:
            $ref: "#/components/schemas/UInt64DTO"
    ReplicatorsDTO:
      type: object
      required: 
        - replicator
        - start
        - end
        - activeFilesWithoutDeposit
        - inactiveFilesWithoutDeposit
      properties:
        replicator:
          type: string
          example: "B27AA5B89DB9BC9CFC92C1F9E46A8CBB15F379C75ECF0128D475B4D5B03EC454"
        start:
          $ref: "#/components/schemas/UInt64DTO"
        end:
          $ref: "#/components/schemas/UInt64DTO"
        activeFilesWithoutDeposit:
          type: array
          items: {}
          example: ["AA2D2427E105A9B60DF634553849135DF629F1408A018D02B07A70CAFFB43093"]
        inactiveFilesWithoutDeposit:
          type: array
          items: {}
          example: []
    FileDTO:
      type: object
      required: 
        - fileHash
        - size
      properties:
        fileHash:
          type: string
          example: "AA2D2427E105A9B60DF634553849135DF629F1408A018D02B07A70CAFFB43093"
        size:
          $ref: "#/components/schemas/UInt64DTO"
        
    # Lock endpoints
    SecretLockWithMeta:
      type: object
      required:
        - meta
        - lock
      properties:
        meta:
          $ref: "#/components/schemas/MetaLockDTO"
        lock:
          $ref: "#/components/schemas/SecretLockInfoDTO"
    SecretLockInfoDTO:
      type: object
      required:
        - account
        - accountAddress
        - mosaicId
        - amount
        - height
        - status
        - hashAlgorithm
        - secret
        - recipient
        - compositeHash
      properties:
        account:
          type: string
          example: "CFC31B3080B36BC3D59DF4AB936AC72F4DC15CE3C3E1B1EC5EA41415A4C33FEE"
        accountAddress: 
          type: string
          example: "9052838D173BA9DC1822C12F8CC2EA1A3B88939772B7F26D84"
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        amount:
          $ref: "#/components/schemas/UInt64DTO"
        height:
          $ref: "#/components/schemas/UInt64DTO"
        status:
          type: integer
          example: 0
        hashAlgorithm:
          type: integer
          example: 4
        secret:
          type: string
          example: "0000000000000000000000000000000000000000000000000000000000000000"
        recipient:
          type: string
          example: "90CFA4D204CC396ED38A1BA693CB2482B58152E175BFE8B5BB"
        compositeHash:
          type: string
          example: "B8C1A5FBAA5AB8AB62444212CABB59E2E357DD9099001A29E81C166606810AA6"
    HashLockWithMeta:
      type: object
      required:
        - meta
        - lock
      properties:
        meta:
          $ref: "#/components/schemas/MetaLockDTO"
        lock:
          $ref: "#/components/schemas/HashLockInfoDTO"
    HashLockInfoDTO:
      type: object
      required:
        - account
        - accountAddress
        - mosaicId
        - amount
        - height
        - status
        - hash
      properties:
        account:
          type: string
          example: "CFC31B3080B36BC3D59DF4AB936AC72F4DC15CE3C3E1B1EC5EA41415A4C33FEE"
        accountAddress: 
          type: string
          example: "9052838D173BA9DC1822C12F8CC2EA1A3B88939772B7F26D84"
        mosaicId:
          $ref: "#/components/schemas/UInt64DTO"
        amount:
          $ref: "#/components/schemas/UInt64DTO"
        height:
          $ref: "#/components/schemas/UInt64DTO"
        status:
          type: string
          example: 0
        hash:
          type: string
          example: "67829ABA183FDA679273373C9973F23F0D8611371ED31C23C6D80FCAD0AE5C87"
    
    MetaLockDTO:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: "5df25d1c84631392c2973877"

    # Node endpoints
    NodeInfoDTO:
      type: object
      required:
      - publicKey
      - port
      - networkIdentifier
      - version
      - roles
      - host
      - friendlyName
      properties:
        publicKey:
          type: string
          description: The public key used to identify the node.
          example: EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390
        port:
          type: integer
          description: The port used for the communication.
          format: int32
          example: 7900
        networkIdentifier:
          type: integer
          format: int32
          example: 144
        version:
          type: integer
          description: The version of the application.
          format: int32
          example: 0
        roles:
          $ref: "#/components/schemas/RolesTypeEnum"
        host:
          type: string
          description: The IP address of the endpoint.
          example: 127.0.0.1
        friendlyName:
          type: string
          description: The name of the node.
          example: api-node-0
    NodeTimeDTO:
      type: object
      required:
      - communicationTimestamps
      properties:
        communicationTimestamps:
          $ref: "#/components/schemas/communicationTimestamps"
    # Request bodies
    mosaicIds:
      type: object
      properties:
        mosaicIds:
          type: array
          description: The array of mosaic identifiers.
          items:
            type: string
            format: hex
          example:
          - d525ad41d95fcf29
    namespaceIds:
      type: object
      properties:
        namespaceIds:
          type: array
          description: The array of namespace identifiers.
          items:
            type: string
            format: hex
          example:
          - 84b3552d375ffa4b
    publicKeys:
      type: object
      properties:
        publicKeys:
          type: array
          items:
            type: string
          example:
          - "8599BA6DB5B81BB69F96B88DD80A3B9EB7BBF8849CBD979100E89D69C30356E0"
          - "3DCB6E5EFF4D63A38902EF948E895B01D6EA497EBF84B1460C14CA5BEDCAD9F3"
    metadataIds:
      type: object
      properties:
        metadataIds:
          type: array
          items:
            type: string
            format: hex
          example:
          - d525ad41d95fcf29
          - SCJW742TNBMMX2UO4DVKXGP6T3CO6XXR6ZRWMVU2
          - 321DE652C4D3362FC2DDF7800F6582F4A10CFEA134B81F8AB6E4BE78BBA4D18E
    metadataKey:
      type: string
      format: hex
      description: 'Metadata key scoped to source, target and type expressed.'
      example: 0DC67FBE1CAD29E3
    accountIds:
      type: object
      properties:
        publicKeys:
          type: array
          description: The array of public keys.
          items:
            type: string
          example:
          - AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        addresses:
          type: array
          description: The array of addresses.
          items:
            type: string
          example:
          - SDRDGFTDLLCB67D4HPGIMIHPNSRYRJRT7DOBGWZY
          - SBCPGZ3S2SCC3YHBBTYDCUZV4ZZEPHM2KGCP4QXX
    transactionIds:
      type: object
      properties:
        transactionIds:
          type: array
          description: The array of transaction ids.
          items:
            type: string
          example:
          - 59B8DA0F0CB2720001103922
          - 59B8D8E60CB2720001103904
    transactionHashes:
      type: object
      properties:
        hashes:
          type: array
          description: The array of transaction hashes.
          items:
            type: string
          example:
          - 5AF72FE39C0515E823903918A0BFE9625DD752C7BD63969C8869F25E9D155DE5
    transactionPayload:
      type: object
      properties:
        payload:
          type: string
          description: The transaction payload.
    cosignature:
      type: object
      properties:
        parentHash:
          type: string
          description: The hash of parent aggregate transaction that has been signed by a cosignatory of the transaction.
        signature:
          type: string
          description: The signatures generated by signing the parent aggregate transaction hash.
        signer:
          type: string
          description: The signer of the transaction.
    merkleProofInfo:
      type: object
      properties:
        merklePath:
          type: array
          description: The complementary data needed to calculate the merkle root.
          items:
            $ref: "#/components/schemas/merklePathItem"
    merklePathItem:
      type: object
      properties:
        position:
          type: integer
          example: 1
        hash:
          type: string
    communicationTimestamps:
      type: object
      properties:
        sendTimestamp:
          $ref: "#/components/schemas/UInt64DTO"
        receiveTimestamp:
          $ref: "#/components/schemas/UInt64DTO"
    compositeHashes:
      type: object
      properties:
        compositeHashes:
          type: array
          description: The array of computed hashes.
          items:
            type: string
          example:
          - 764b3aa022fb929caa204670a817205dc08f2b172d501f36d4f0ec4ea50afae9